import{d as g,z as u,$ as p,G as i,af as y}from"#entry";const m=g({props:{baseUrl:{type:String,default:()=>u()?.docus?.github?.baseUrl||"https://github.com",required:!1},owner:{type:String,default:()=>u()?.docus?.github?.owner,required:!1},repo:{type:String,default:()=>u()?.docus?.github?.repo,required:!1},branch:{type:String,default:()=>u()?.docus?.github?.branch,required:!1},dir:{type:String,default:()=>u()?.docus?.github?.dir,required:!1},source:{type:String,required:!1,default:void 0},page:{type:Object,required:!1,default:void 0},contentDir:{type:String,required:!1,default:()=>u()?.docus?.github?.dir||"content"},edit:{type:Boolean,required:!1,default:()=>u()?.docus?.github?.edit}},setup(e){if(!e.owner||!e.repo||!e.branch)throw new Error("If you want to use `GithubLink` component, you must specify: `owner`, `repo` and `branch`.");const r=i(()=>{let{baseUrl:t,repo:o,owner:s,branch:l,contentDir:c}=e,d="";if(u()?.public?.content){let n;const{sources:f}=u().public.content;for(const h in f||[])if(e.page._id.startsWith(h)){n=f[h];break}n?.driver==="github"&&(o=n.repo||e.repo||"",s=n.owner||e.owner||"",l=n.branch||e.branch||"main",c=n.dir||e.contentDir||"",d=n.prefix||"")}return{baseUrl:t,repo:o,owner:s,branch:l,contentDir:c,prefix:d}}),a=i(()=>y(`${r.value.baseUrl}/${r.value.owner}/${r.value.repo}`)),b=i(()=>{const t=[];return e?.page?._path?(r.value.contentDir&&t.push(r.value.contentDir),t.push(e.page._file.substring(r.value.prefix.length)),t):(e.dir&&t.push(e.dir),e.source&&t.push(e.source),t)});return{url:i(()=>{const t=[a.value];return e.edit?t.push("edit"):t.push("tree"),t.push(r?.value?.branch||"",...b.value),t.filter(Boolean).join("/")})}},render(e){const{url:r}=e;return p()?.default?.({url:r})}});export{m as _};
