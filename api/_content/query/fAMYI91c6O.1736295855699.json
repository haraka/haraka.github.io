{"_path":"/core/Logging","_dir":"core","_draft":false,"_partial":false,"_locale":"","title":"Logging","description":"Haraka has built-in logging (see API docs below) and support for log plugins.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"logging"},"children":[{"type":"text","value":"Logging"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Haraka has built-in logging (see API docs below) and support for log plugins."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"log.ini"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Contains settings for log level, timestamps, and format. See the example log.ini file for examples."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"loglevel"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The loglevel file provides a finger-friendly way to change the loglevel on the CLI. Use it like so: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"echo DEBUG > config/loglevel"}]},{"type":"text","value":". When the level in log.ini is set and the loglevel file is present, the loglevel file wins. During runtime, whichever was edited most recently wins."}]},{"type":"element","tag":"h2","props":{"id":"logging-api"},"children":[{"type":"text","value":"Logging API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Logging conventions within Haraka"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This section pertains to the built in logging. For log plugins like ("},{"type":"element","tag":"a","props":{"href":"https://github.com/haraka/haraka-plugin-syslog","rel":["nofollow"]},"children":[{"type":"text","value":"haraka-plugin-syslog"}]},{"type":"text","value":"), refer to the plugin's docs."}]},{"type":"element","tag":"h2","props":{"id":"see-also"},"children":[{"type":"text","value":"See also"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/haraka/Haraka/pull/119","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/haraka/Haraka/pull/119"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The logline by default will be in the form of:"}]},{"type":"element","tag":"pre","props":{"code":"[level] [uuid] [origin] message\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[level] [uuid] [origin] message\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Where origin is \"core\" or the name of the plugin which\ntriggered the message, and \"uuid\" is the ID of the\nconnection associated with the message."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When calling a log method on logger, you should provide the\nplugin object and the connection object anywhere in the arguments\nto the log method."}]},{"type":"element","tag":"pre","props":{"code":"logger.logdebug(\"i like turtles\", plugin, connection);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"logger.logdebug(\"i like turtles\", plugin, connection);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Will yield, for example,"}]},{"type":"element","tag":"pre","props":{"code":"[DEBUG] [7F1C820F-DC79-4192-9AA6-5307354B20A6] [dnsbl] i like turtles\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[DEBUG] [7F1C820F-DC79-4192-9AA6-5307354B20A6] [dnsbl] i like turtles\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you call the log method on the connection object, you can\nforego the connection as argument:"}]},{"type":"element","tag":"pre","props":{"code":"connection.logdebug(\"turtles all the way down\", plugin);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"connection.logdebug(\"turtles all the way down\", plugin);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"and similarly for the log methods on the plugin object:"}]},{"type":"element","tag":"pre","props":{"code":"plugin.logdebug(\"he just really likes turtles\", connection);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"plugin.logdebug(\"he just really likes turtles\", connection);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"failing to provide a connection and/or plugin object will leave\nthe default values in the log (currently \"core\")."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is implemented by testing for argument type in\nthe logger.js log* method. objects-as-arguments are then sniffed\nto try to determine if they're a connection or plugin instance."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The logfmt format is also supported and can be enabled by changing the format\nfrom "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"default"}]},{"type":"text","value":" to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"logfmt"}]},{"type":"text","value":" in the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"config/log.ini"}]},{"type":"text","value":" file which will\nstart logging in the following format below."}]},{"type":"element","tag":"pre","props":{"code":"level=PROTOCOL uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=\"S: 354 go ahead, make my day\"\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"level=PROTOCOL uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=\"S: 354 go ahead, make my day\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Any objects you pass through will also be appeneded to the log line as\nkey=value and will look like this:"}]},{"type":"element","tag":"pre","props":{"code":"level=NOTICE uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=disconnect ip=127.0.0.1 rdns=Unknown helo=3h2dnz8a0if relay=N early=N esmtp=N tls=N pipe=N errors=0 txns=1 rcpts=1/0/0 msgs=1/0/0 bytes=222 lr=\"\" time=0.052\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"level=NOTICE uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=disconnect ip=127.0.0.1 rdns=Unknown helo=3h2dnz8a0if relay=N early=N esmtp=N tls=N pipe=N errors=0 txns=1 rcpts=1/0/0 msgs=1/0/0 bytes=222 lr=\"\" time=0.052\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can find out more about logfmt here: "},{"type":"element","tag":"a","props":{"href":"https://brandur.org/logfmt","rel":["nofollow"]},"children":[{"type":"text","value":"https://brandur.org/logfmt"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"logging-api","depth":2,"text":"Logging API"},{"id":"see-also","depth":2,"text":"See also"}]}},"_type":"markdown","_id":"content:6.core:11.Logging.md","_source":"content","_file":"6.core/11.Logging.md","_stem":"6.core/11.Logging","_extension":"md"}