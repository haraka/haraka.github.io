[{"data":1,"prerenderedAt":756},["ShallowReactive",2],{"search-api":3},[4,12,20,31,40,47,57,64,71,78,85,92,99,107,113,121,128,143,160,168,175,186,195,207,215,223,232,244,253,261,268,275,282,289,296,303,310,318,327,335,342,349,356,369,376,383,390,399,406,419,426,433,441,448,455,468,481,488,497,505,512,519,527,534,541,548,555,562,570,577,584,591,599,606,614,621,629,637,648,655,662,670,677,686,694,702,715,722,730,740,748],{"id":5,"path":6,"dir":7,"title":8,"description":9,"keywords":10,"body":11},"content:0.index.md","/","","Haraka SMTP Email Server","Haraka is an open source SMTP server written in Node.js. Haraka is fast, scalable, and extensible.",[],"    Haraka    A modern, high performance, flexible SMTP server . Haraka is an open source SMTP server written in Node.js which provides extremely high performance coupled with a flexible plugin system allowing JavaScript programmers full access to change the behaviour of the server. It is used heavily in some high traffic sites - see the \"Known Users\" link above for testimonials.",{"id":13,"path":14,"dir":7,"title":15,"description":16,"keywords":17,"body":19},"content:1.getting_started.md","/getting_started","Getting Started","Getting Started with Haraka",[18],"Haraka","  Getting Started  Haraka  A modern, high performance, flexible SMTP server.  Haraka is an open source SMTP server written in Node.js which provides extremely high performance coupled with a flexible plugin system allowing Javascript programmers full access to change the behaviour of the server. It is used heavily in some high traffic sites - see the   \"Known Users\"  link above for testimonials.  \n      \n      \n      \n      \n      \n       \n       \n       \n        Haraka is a highly scalable   node.js  email server with a modular\nplugin architecture. Haraka can serve thousands of concurrent connections\nand deliver thousands of messages per second. Haraka and plugins are written\nin asynchronous JS and are very fast.  Haraka has very good spam protection (see   plugins ) and works\nwell as a filtering   MTA . It also works well as a   MSA  running on\nport 587 with auth and   dkim_sign  plugins enabled.  Haraka makes no attempt to be a mail store (like Exchange or Postfix/Exim/Qmail),\na   LDA , nor an IMAP server (like Dovecot or Courier). Haraka is\ntypically used   with  such systems.  Haraka has a scalable outbound mail delivery engine built in. Mail\nmarked as   relaying  (such as via an   auth  plugin) is automatically\nqueued for outbound delivery.  Getting Help    Join the mailing list  (implemented as a Haraka plugin)   GitHub Issues  Screencast    Why Use Haraka?  Haraka's plugin architecture provides an easily extensible MTA that\ncomplements traditional MTAs that excel at managing mail stores but do\nnot have sufficient filtering.  The plugin system makes it easy to code new features. A typical example\nis providing qmail-like extended addresses to an Exchange system,\nwhereby you could receive mail as   user-anyword@domain.com , and yet\nstill have it correctly routed to   user@domain.com . This is a few lines of\ncode in Haraka.  Plugins are provided for running mail through   SpamAssassin , validating\n  HELO  names, checking   DNS Blocklists , and   many others .  Installing Haraka  Haraka requires   node.js  to run. Install Haraka with [npm]  2 :      npm   install   -g   Haraka\n     yarn   add   global   Haraka\n     pnpm   add   -g   Haraka\n   If the command gives \"nobody\" errors run the next command      npm   -g   config   set   user   root\n   npm   install   -g   Haraka\n  After installation, use the   haraka  binary to set up the service.  Running Haraka  First, create the service:     haraka   -i   /path/to/haraka_test\n  That creates the directory   haraka_test  with   config  and   plugin \ndirectories within. It also sets the host name used by Haraka\nto the output of   hostname .  If   hostname  is not correct, edit   config/host_list . For example,\nto receive mail addressed to   user@domain.com , add   domain.com  to the\n  config/host_list  file.  Finally, start Haraka using root permissions:     haraka   -c   /path/to/haraka_test\n  And it will run.  Configure Haraka  To choose which plugins run, edit   config/plugins . Plugins control the\noverall behaviour of Haraka. By default, only messages to domains listed\nin   config/host_list  will be accepted and then delivered via the\n  smtp-forward  plugin. Configure the destination in   config/smtp_forward.ini .  Read the Fine Manual     haraka   -h   plugins/  $name\n  The docs detail how each plugin is configured. After editing\n  config/plugins , restart Haraka and enjoy!  Running from git  If you are unable to use npm to install Haraka, you can run from git by\nfollowing these steps:  First clone the repository:     git   clone   https://github.com/haraka/Haraka.git\n   cd   Haraka\n  Install Haraka's node.js dependencies locally:     npm   install\n  Edit   config/plugins  and   config/smtp.ini  to specify the plugins and\nconfig you want.  Finally run Haraka:     node   haraka.js\n  License and Author  Haraka is MIT licensed - see the   LICENSE  file for details.  Haraka is a project started by   Matt Sergeant , a 10 year veteran of the email\nand anti-spam world. Previous projects have been the project leader for\nSpamAssassin and a hacker on   Qpsmtpd .  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":21,"path":22,"dir":7,"title":23,"description":24,"keywords":25,"body":30},"content:2.about.md","/about","About","These pages attempt to give a potted history of Haraka.",[26,27,28,29],"Introduction to Haraka","A Growing User Base","Adding Outbound","Future Directions","  Introduction to Haraka  Haraka is a high performance SMTP server. It came out of Matt Sergeant's experience at MessageLabs/Symantec, building extremely high performance spam traps that had to process thousands of concurrent high latency connections.  Having worked on Qpsmtpd before, the basic design of a plugin system was taken from Qpsmtpd, and applied to a new Node.js mail server.  The original goal was to learn how to code in Node.js, but it turned into so much more.  A Growing User Base  Shortly after releasing the first few working versions, Haraka was noticed by Craigslist. They were looking to implement something similar, likely in C++, but also using an event loop architecture for scalability. Their current Postfix servers were not scaling well enough.  Craigslist extended Haraka and improved many of the core features and plugins. After rollout to their systems they de-commissioned around 50% of their hardware that was wasted by the difficult to extend Postfix system.  At the same time, other high end users, including British anti-spam systems developers FSL, began to notice Haraka.  With many commercial contributors, Haraka has grown into a very capable, stable and scalable mail server.  Adding Outbound  Once Haraka was fully capable of replacing anyone's inbound mail server (where mail arrives for them from the Internet, and where you have to implement the most stringent of Anti-Spam methods), it was time to add a scalable outbound mail sender to Haraka.  We spent many late nights putting together the outbound feature and making sure it was as scalable as the inbound service. Testing shows that it is several times faster than Postfix at sending email.  There's still work to do on outbound, but for most senders it will fit the bill perfectly.  Future Directions  In the future Haraka intends to add features to make the outbound system rival those of commercial large scale mail vendors such as Port 25 and Message Systems.  To do that we need to add a queue management system which scales transparently across clusters. Large receivers of email have specific requirements which are hard to adhere to when you have a cluster of hardware, such as how much mail they are willing to receive in a particular time window.",{"id":32,"path":33,"dir":7,"title":34,"description":35,"keywords":36,"body":39},"content:3.community.md","/community","Community","Haraka has a strong community presence. Use the links below to talk with us.",[37,38],"Mailing List","Github","  Mailing List  Haraka has an active Mailing List which you can join by sending a mail to   haraka-sub@harakamail.com . We are working on providing list archives.  Github  For everything else, we use Github. Post bug reports there on the issue tracker and feel free to browse the code and try and learn the structure of the project.  Haraka can be found at   haraka/Haraka  on Github.",{"id":41,"path":42,"dir":7,"title":43,"description":44,"keywords":45,"body":46},"content:5.users.md","/users","Known Users","Large Scale Haraka Users",[44],"  Large Scale Haraka Users  Haraka is used by many large scale email providers. If you are using Haraka in a large scale environment, please add your company to this list.    Cloudron - A platform for self-hosting web apps   Craigslist - Over 20 million emails a day through Haraka   Email It In - A service to email files to Google Drive, Dropbox or Skydrive   Fort Anti-Spam   Mail.tm - Temporary Email   Mirus Research - Address simplification/forwarding services   ThreatWave - Hidden insights and data from email - over 150 million emails a day   DuckDuckGo Email Protection   Maildax - Temporary Email   Zerodha - One of India's largest investment platform",{"id":48,"path":49,"dir":50,"title":51,"description":52,"keywords":53,"body":56},"content:6.core:1.Address.md","/core/Address","core","Address Object","The Address object is an interface to reading email addresses passed in at\nSMTP time. As such it parses all the formats in RFC-2821 and 2822, and\nsupports correctly escaping email addresses.",[54,55],"API","Advanced Usage","  Address Object  The Address object is an interface to reading email addresses passed in at\nSMTP time. As such it parses all the formats in RFC-2821 and 2822, and\nsupports correctly escaping email addresses.  API   new Address (user, host)  Create a new address object for user@host   new Address (email)  Creates a new address object by parsing the email address. Will throw an\nexception if the address cannot be parsed.   address.user  Access the local part of the email address   address.host  Access the domain part of the email adress   address.format()  Provides the email address in the appropriate   \u003Cuser@host>  format. And\ndeals correctly with the null sender and local names.   address.toString()  Same as format().   address.address()  Provides the email address in 'user@host' format.  Advanced Usage  It is possible to mess with the regular expressions used to match addresses\nfor stricter or less strict matching.  To change the behaviour mess with the following variables:   var adr = require('./address');\n// Now change one of the following. Note they are RegExp objects NOT strings.\nadr.atom_expr;\nadr.address_literal_expr;\nadr.subdomain_expr;\nadr.domain_expr;\nadr.qtext_expr;\nadr.text_expr;\n// Don't forget to recompile:\nadr.compile_re();\n",{"id":58,"path":59,"dir":50,"title":60,"description":61,"keywords":62,"body":63},"content:6.core:2.Body.md","/core/Body","Body Object","This documentation has moved to haraka/email-message.",[],"  Body Object  This documentation has moved to   haraka/email-message .",{"id":65,"path":66,"dir":50,"title":67,"description":68,"keywords":69,"body":70},"content:6.core:3.Config.md","/core/Config","Config","This documentation has moved to haraka-config.",[],"  Config  This documentation has moved to   haraka-config .",{"id":72,"path":73,"dir":50,"title":74,"description":75,"keywords":76,"body":77},"content:6.core:4.Connection.md","/core/Connection","Connection Object","For each connection to Haraka there is one connection object.",[54],"  Connection Object  For each connection to Haraka there is one connection object.  API   connection.uuid  A unique UUID for this connection.   connection.remote - info about the host that is connecting to Haraka.   ip   - remote IP address  host - reverse DNS of the remote hosts IP  is_private - true if the remote IP is from a private (loopback, RFC 1918, link local, etc.) IP address.  is_local - true if the remote IP is localhost (loopback, link local)  connection.local - info about the host that is running Haraka   ip - the IP of the Haraka server, as reported by the OS  port - the port number handling the connection.  host - the rDNS host name of the local IP  connection.proxy - proxy properties set when a proxy is used (like haproxy)   allowed - if the remote IP has proxy permission  ip - when proxied, the proxy servers IP address  type - currently null or 'haproxy'  connection.hello   verb - Either 'EHLO' or 'HELO' whichever the remote end used  host - The hostname given with HELO or EHLO  connection.notes  An object which persists during the lifetime of the connection. It is used to store connection-specific properties. See also, connection.results and   haraka-notes .   connection.transaction  The current transaction object, valid after MAIL FROM, and destroyed at queue\ntime, RSET time, or if MAIL FROM was rejected. See the Transaction Object\ndocumentation file.   connection.relaying  A boolean flag to say whether this connection is allowed to relay mails (i.e.\ndeliver mails outbound). This is normally set by SMTP AUTH, or sometimes via\nan IP address check.   connection.current_line  For low level use. Contains the current line sent from the remote end,\nverbatim as it was sent. Can be useful in certain botnet detection techniques.   connection.last_response  Contains the last SMTP response sent to the client.   connection.remote_closed  For low level use.  This value is set when the remote host drops the connection.   connection.results  Store results of processing in a structured format. See   docs/Results",{"id":79,"path":80,"dir":50,"title":81,"description":82,"keywords":83,"body":84},"content:6.core:5.CoreConfig.md","/core/CoreConfig","Core Configuration Files","See Logging.",[],"  Core Configuration Files  See   Logging .  The Haraka core reads some configuration files to determine a few actions:   smtp.yaml or smtp.json  If either of these files exist then they are loaded first after log.ini.\nThis file is designed to use the JSON/YAML file overrides documented in\n  Config  to optionally provide the entire configuration in a single file.   databytes  Contains the maximum SIZE of an email that Haraka will receive.   plugins  The list of plugins to load   smtp.ini  Keys:   listen_host, port - the host and port to listen on (default: ::0 and 25)  listen - (default:   ::0 :25) Comma separated IP:Port addresses to listen on  inactivity_time - how long to let clients idle in seconds (default: 300)  nodes - specifies how many processes to fork. The string \"cpus\" will fork as many children as there are CPUs (default: 1, which enables cluster mode with a single process)  user - optionally a user to drop privileges to. Can be a string or UID.  group - optionally a group to drop privileges to. Can be a string or GID.  ignore_bad_plugins - If a plugin fails to compile by default Haraka will stop at load time.\nIf, however, you wish to continue on without that plugin's facilities, then\nset this config option  daemonize - enable this to cause Haraka to fork into the background on start-up (default: 0)  daemon_log_file - (default: /var/log/haraka.log) where to redirect stdout/stderr when daemonized  daemon_pid_file - (default: /var/run/haraka.pid) where to write a PID file to  spool_dir - (default: none) directory to create temporary spool files in  spool_after - (default: -1) if message exceeds this size in bytes, then spool the message to disk\nspecify -1 to disable spooling completely or 0 to force all messages to be spooled to disk.  graceful_shutdown - (default: false) enable this to wait for sockets on shutdown instead of closing them quickly  force_shutdown_timeout - (default: 30) number of seconds to wait for a graceful shutdown  smtputf8 - (default: true) advertise support for SMTPUTF8  strict_rfc1869 - (default: false) Requires senders to conform to RFC 1869 and RFC 821 when sending the MAIL FROM and RCPT TO commands. In particular,\nthe inclusion of spurious spaces or missing angle brackets will be rejected.  me  A name to use for this server. Used in received lines and elsewhere. Setup\nby default to be your hostname.  deny_includes_uuid  Each connection and mail in Haraka includes a UUID which is also in most log\nmessages. If you put a   1  in this file then every denied mail (either via\nDENY/5xx or DENYSOFT/4xx return codes) will include the uuid at the start\nof each line of the deny message in brackets, making it easy to track\nproblems back to the logs.  Because UUIDs are long, if you put a number greater than 1 in the config\nfile, it will be truncated to that length. We recommend a 6 as a good\nbalance of finding in the logs and not making lines too long.  banner_includes_uuid  This will add the full UUID to the first line of the SMTP greeting banner.  early_talker_delay  If clients talk early we   punish  them with a delay of this many milliseconds\ndefault: 1000.  plugin_timeout  Seconds to allow a plugin to run before the next hook is called automatically\ndefault: 30  Note also that each plugin can have a   config/\u003Cplugin_name>.timeout \nfile specifying a per-plugin timeout.  In this file you can set a timeout of 0 to mean that this plugin's hooks never time out.  Use this with care.  If the plugin is in a sub-directory of plugins, then you must create this file\nin the equivalent path e.g. the queue/smtp_forward would need a timeout file in   config/queue/smtp_forward.timeout  smtpgreeting  The greeting line used when a client connects. This can be multiple lines\nif required (this may cause some connecting machines to fail - though\nusually only spam-bots).  max_received_count  The maximum number of \"Received\" headers allowed in an email. This is a\nsimple protection against mail loops. Defaults to 100.  max_line_length  The maximum length of lines in SMTP session commands (e.g. RCPT, HELO etc).\nDefaults to 512 (bytes) which is mandated by RFC 5321 §4.5.3.1.4. Clients\nexceeding this limit will be immediately disconnected with a \"521 Command\nline too long\" error.  max_data_line_length  The maximum length of lines in the DATA section of emails. Defaults to 992\n(bytes) which is the limit set by Sendmail. When this limit is exceeded the\nthree bytes \"\\r\\n \" (0x0d 0x0a 0x20) are inserted into the stream to \"fix\"\nit. This has the potential to \"break\" some email, but makes it more likely\nto be accepted by upstream/downstream services, and is the same behaviour\nas Sendmail. Also when the data line length limit is exceeded\n  transaction.notes.data_line_length_exceeded  is set to   true .  outbound.concurrency_max  Maximum concurrency to use when delivering mails outbound. Defaults to 100.  outbound.disabled  Put a   1  in this file to temporarily disable outbound delivery. Useful\nwhile figuring out network issues or testing.  outbound.bounce_message  The bounce message if delivery of the message fails. The default is normally fine. Bounce messages contain a number of template\nreplacement values which are best discovered by looking at the source code.  haproxy_hosts  A list of HAProxy hosts that Haraka should enable the PROXY protocol from.\nSee   HAProxy  max_mime_parts  Defaults to 1000. There's a potential denial of service in large numbers of\nMIME parts in carefully crafted emails. If this limit is too low for some\nreason you can increase it by setting a value in this file.  connection_close_message  Defaults to   closing connection. Have a jolly good day.  can be overrridden with custom text",{"id":86,"path":87,"dir":50,"title":88,"description":89,"keywords":90,"body":91},"content:6.core:6.CustomReturnCodes.md","/core/CustomReturnCodes","Custom Return Codes","This content has moved to haraka-dsn.",[],"  Custom Return Codes  This content has moved to   haraka-dsn .",{"id":93,"path":94,"dir":50,"title":95,"description":96,"keywords":97,"body":98},"content:6.core:7.HAProxy.md","/core/HAProxy","HAProxy PROXY protocol extension support","Haraka natively supports the PROXY protocol 1.",[],"  HAProxy  Haraka natively supports the PROXY protocol   1 .  This allows an upstream proxy to pass IP address and port of the client which\nHaraka will use instead of the socket IP address (which is of the proxy).\nThis allows DNSBLs and access control lists to operate on the proxied address.  Support is disabled by default and if HAProxy or other attempts to send a\nPROXY command then Haraka will return a DENYSOFTDISCONNECT error.\nDENYSOFT is used to prevent configuration errors from rejecting valid mail.  To enable support for PROXY you must create a   haproxy_hosts  configuration\nfile which should contain a list of IP addresses of the HAProxy hosts\nthat should be allowed to send the PROXY command. A range of IP\naddresses can be specified by it's CIDR network address.  When a host connects to Haraka that matches an IP address present in the\n  haproxy_hosts  file - a banner is not sent, instead Haraka waits for the\nPROXY command to be sent before proceeding.  The connection will timeout\nwith   421 PROXY timed out  if the command is not sent within 30 seconds.  NOTE: because Haraka does not send a banner when a listed HAProxy host\nconnects you must set check-send-proxy to ensure that the service checks\nsend a PROXY command before they run.   1    http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt  HAProxy supports the PROXY protocol in version 1.5 or later however there\nare patches available to add support for 1.4.  Here is an example listener section for haproxy.cfg:   listen smtp :25\n        mode tcp\n        option tcplog\n        option smtpchk\n        balance roundrobin\n        server smtp1 ip.of.haraka.server1:25 check-send-proxy check inter 10s send-proxy\n        server smtp2 ip.of.haraka.server2:25 check-send-proxy check inter 10s send-proxy\n        server smtp3 ip.of.haraka.server3:25 check-send-proxy check inter 10s send-proxy\n        server smtp4 ip.of.haraka.server4:25 check-send-proxy check inter 10s send-proxy\n        server smtp5 ip.of.haraka.server5:25 check-send-proxy check inter 10s send-proxy\n  The important part is   send-proxy  which causes HAProxy to send the PROXY\nextension on connection.  When using   option smtpchk  you will see CONNRESET errors reported in the Haraka logs as\nsmtpchk drops the connection before the HELO response is still being written.\nYou can use the   option tcp-check  instead to provide a better service check by having\nthe check wait for the banner, send QUIT and then check the response:       option tcp-check\n    tcp-check expect rstring ^220\\ \n    tcp-check send QUIT\\r\\n\n    tcp-check expect rstring ^221\\ \n",{"id":100,"path":101,"dir":50,"title":102,"description":103,"keywords":104,"body":106},"content:6.core:8.Logging_API.md","/core/Logging_API","Logging API","Logging conventions within Haraka",[105],"See also","  Logging API  Logging conventions within Haraka  See also   https://github.com/haraka/Haraka/pull/119  logline will always always be in the form:     [level] [connection uuid] [origin] message\n  where origin is \"haraka_core\" or the name of the plugin which\ntriggered the message, and \"connection uuid\" is the ID of the\nconnection associated with the message.  when calling a log method on logger, you should provide the\nplugin object and the connection object anywhere in the arguments\nto the log method.     logger.  logdebug  (  \"i like turtles\"  , plugin, connection);\n  will yield, for example,     [DEBUG] [7F1C820F-DC79-4192-9AA6-5307354B20A6] [dnsbl] i like turtles\n  if you call the log method on the connection object, you can\nforego the connection as argument:     connection.  logdebug  (  \"turtles all the way down\"  , plugin);\n  and similarly for the log methods on the plugin object:     plugin.  logdebug  (  \"he just really likes turtles\"  , connection);\n  failing to provide a connection and/or plugin object will leave\nthe default values in the log (currently \"core\" and\n\"no_connection\").  this is implemented by testing for argument type in\nthe logger.js log* method. objects-as-arguments are then sniffed\nto try to determine if they're a connection or plugin instance.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":108,"path":109,"dir":50,"title":110,"description":61,"keywords":111,"body":112},"content:6.core:9.Header.md","/core/Header","Header Object",[],"  Header object  This documentation has moved to   haraka/email-message .",{"id":114,"path":115,"dir":50,"title":116,"description":117,"keywords":118,"body":120},"content:6.core:10.Net_Utils.md","/core/Net_Utils","Net_Utils","This module provides network utility functions.",[119],"Usage","  Net_Utils  This module provides network utility functions.  Usage     var   net_utils   =   require  (  './net_utils'  );\n  ip_to_long     // Convert IPv4 to long\n   var   long   =   net_utils.  ip_to_long  (  '11.22.33.44'  );    // 185999660\n  long_to_ip     // Convert long to IPv4\n   var   ip   =   net_utils.  long_to_ip  (  185999660  );    // 11.22.33.44\n  dec_to_hex     // Convert decimal to hex\n   var   hex   =   net_utils.  dec_to_hex  (  20111104  );    // 132df00\n  hex_to_dec     // Convert hex to decimal\n   var   dec   =   net_utils.  hex_to_dec  (  '132df00'  );    // 20111104\n  is_local_ipv4     // Is IPv4 address on a local network?\n   net_utils.  is_local_ipv4  (  '127.0.0.200'  );     // true (localhost)\n   net_utils.  is_local_ipv4  (  '169.254.0.0'  );     // true (link local)\n   net_utils.  is_local_ipv4  (  '226.0.0.1'  );       // false\n  is_private_ipv4     // Is IPv4 address in RFC 1918 reserved private address space?\n   net_utils.  is_private_ipv4  (  '10.0.0.0'  );         // true\n   net_utils.  is_private_ipv4  (  '192.168.0.0'  );      // true\n   net_utils.  is_private_ipv4  (  '172.16.0.0'  );       // true\n  is_local_ipv6     // Is IPv6 addr on local network?\n   net_utils.  is_local_ipv6  (  '::1'  );             // true (localhost)\n   net_utils.  is_local_ipv6  (  'fe80::'  )           // true (link local)\n   net_utils.  is_local_ipv6  (  'fc00::'  )           // true (unique local)\n   net_utils.  is_local_ipv6  (  'fd00::'  )           // true (unique local)\n  is_private_ip     // determines if an IPv4 or IPv6 address is on a \"private\" network\n   // For IPv4, returns true if is_private_ipv4 or is_local_ipv4 are true\n   // For IPv6, returns true if is_local_ipv6 is true\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":122,"path":123,"dir":50,"title":124,"description":125,"keywords":126,"body":127},"content:6.core:11.Logging.md","/core/Logging","Logging","Haraka has built-in logging (see API docs below) and support for log plugins.",[102,105],"  Logging  Haraka has built-in logging (see API docs below) and support for log plugins.   log.ini  Contains settings for log level, timestamps, and format. See the example log.ini file for examples.   loglevel  The loglevel file provides a finger-friendly way to change the loglevel on the CLI. Use it like so:   echo DEBUG > config/loglevel . When the level in log.ini is set and the loglevel file is present, the loglevel file wins. During runtime, whichever was edited most recently wins.  Logging API  Logging conventions within Haraka  This section pertains to the built in logging. For log plugins like (  haraka-plugin-syslog ), refer to the plugin's docs.  See also   https://github.com/haraka/Haraka/pull/119  The logline by default will be in the form of:   [level] [uuid] [origin] message\n  Where origin is \"core\" or the name of the plugin which\ntriggered the message, and \"uuid\" is the ID of the\nconnection associated with the message.  When calling a log method on logger, you should provide the\nplugin object and the connection object anywhere in the arguments\nto the log method.   logger.logdebug(\"i like turtles\", plugin, connection);\n  Will yield, for example,   [DEBUG] [7F1C820F-DC79-4192-9AA6-5307354B20A6] [dnsbl] i like turtles\n  If you call the log method on the connection object, you can\nforego the connection as argument:   connection.logdebug(\"turtles all the way down\", plugin);\n  and similarly for the log methods on the plugin object:   plugin.logdebug(\"he just really likes turtles\", connection);\n  failing to provide a connection and/or plugin object will leave\nthe default values in the log (currently \"core\").  This is implemented by testing for argument type in\nthe logger.js log* method. objects-as-arguments are then sniffed\nto try to determine if they're a connection or plugin instance.  The logfmt format is also supported and can be enabled by changing the format\nfrom   default  to   logfmt  in the   config/log.ini  file which will\nstart logging in the following format below.   level=PROTOCOL uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=\"S: 354 go ahead, make my day\"\n  Any objects you pass through will also be appeneded to the log line as\nkey=value and will look like this:   level=NOTICE uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=disconnect ip=127.0.0.1 rdns=Unknown helo=3h2dnz8a0if relay=N early=N esmtp=N tls=N pipe=N errors=0 txns=1 rcpts=1/0/0 msgs=1/0/0 bytes=222 lr=\"\" time=0.052\n  You can find out more about logfmt here:   https://brandur.org/logfmt",{"id":129,"path":130,"dir":50,"title":131,"description":132,"keywords":133,"body":142},"content:6.core:12.Outbound.md","/core/Outbound","Outbound Mail with Haraka","How to send outbound mail with Haraka",[134,135,136,137,138,139,140,141],"Outbound Configuration Files","The HMail Object","The ToDo Object","Outbound Mail Hooks","Outbound IP address","AUTH","Bounce Messages","Creating a mail internally for outbound delivery","  Outbound Mail  A default installation of Haraka will queue outbound mail for delivery in the\nqueue directory. Those mails will be delivered to the appropriate MX record\nfor that domain. Mails are queued onto your disk, and will deal appropriately\nwith temporary failures to retry delivery later.  Outbound mails are defined as those that have set the   connection.relaying \nflag to   true  via a plugin. The simplest way of doing that is to use SMTP\nAUTH, and have the client authenticate. For example using the   auth/flat_file \nplugin. However it is very simple to write a custom plugin to do this.  For statistics on outbound mail use the   process_title  plugin. See the\ndocumentation for that plugin for details.  To flush the outbound queue (for temporary failed mails) hit the Haraka master\nprocess with the SIGHUP signal (via the   kill  command line tool).  Outbound Configuration Files  outbound.ini    disabled  Default: false. Allows one to temporarily disable outbound delivery, while\nstill receiving and queuing emails. This can be changed while Haraka is\nrunning.    concurrency_max  Default: 100. Specifies the maximum concurrent connections to make. Note that\nif using cluster (multiple CPUs) then this will be multiplied by the number\nof CPUs that you have.    enable_tls  Default: true. Switch to false to disable TLS for outbound mail.  This uses the same   tls_key.pem  and   tls_cert.pem  files that the   tls \nplugin uses, along with other values in   tls.ini . See the   tls plugin\ndocs  for information on generating those\nfiles.  Within   tls.ini  you can specify global options for the values   ciphers ,\n  requestCert  and   rejectUnauthorized , alternatively you can provide\nseparate values by putting them under a key:   [outbound] , such as:   [outbound]\nciphers=!DES\n    ipv6_enabled  When this has a \"true\" value inside (usually a   1 ), it defaults to an 'AAAA'\nlookup first for each MX record, and uses those hosts to send email via.    always_split  Default: false. By default, Haraka groups message recipients by domain so that\nmessages with multiple recipients at the same domain get sent in a single SMTP\nsession. When   always_split  is enabled, each recipient gets a queue entry and\ndelivery in its own SMTP session. This carries a performance penalty but\nenables more flexibility in mail delivery and bounce handling.    received_header  Default: \"Haraka outbound\". If this text is any string except   disabled , the\nstring is attached as a   Received  header to all outbound mail just before it is queued.    connect_timeout  Timeout for connecting to remote servers. Default: 30s    pool_timeout  Outbound mail uses \"pooled\" connections. An unused pool connection will send\na QUIT after this time. Default: 50s  Pooled connections means that a mail to a particular IP address will hold that\nconnection open and use it the next time it is requested. This helps with\nlarge scale outbound mail. If you don't send lots of mail it is advised to\nlower the   pool_timeout  value since it may upset receiving mail servers.  Setting this value to   0  will effectively disable the use of pools. You may\nwish to set this if you have a   get_mx  hook that picks outbound servers on\na per-email basis (rather than per-domain).    pool_concurrency_max  Set this to   0  to completely disable the pooling code.  This value determines how many concurrent connections can be made to a single\nIP address (destination) in the pool. Default: 10 connections.  outbound.bounce_message  See \"Bounce Messages\" below for details.  The HMail Object  Many hooks (see below) pass in a   hmail  object.  You likely won't ever need to call methods on this object, so they are left\nundocumented here.  The attributes of an   hmail  object that may be of use are:   path - the full path to the queue file  filename - the filename within the queue dir  num_failures - the number of times this mail has been temp failed  notes - notes you can store on a hmail object (similar to   transaction.notes )\nto allow you to pass information between outbound hooks  todo - see below  The ToDo Object  The   todo  object contains information about how to deliver this mail. Keys\nyou may be interested in are:   rcpt_to - an Array of   Address  1  objects - the rfc.2821 recipients of this mail  mail_from - an   Address  1  object - the rfc.2821 sender of this mail  domain - the domain this mail is going to (see   always_split  above)  notes - the original transaction.notes for this mail, also contains the\nfollowing useful keys:\n** outbound_ip - the IP address to bind to (note do not set this manually,\nuse the   get_mx  hook)\n** outbound_helo - the EHLO domain to use (again, do not set manually)  queue_time - the epoch milliseconds time when this mail was queued  uuid - the original transaction.uuid  Outbound Mail Hooks  The queue_outbound hook  The first hook that is called prior to queueing an outbound mail is the\n  queue_outbound  hook. Only if all these hooks return   CONT  (or if there are\nno hooks) will the mail be queued for outbound delivery. A return of   OK  will\nindicate that the mail has been queued in some custom manner for outbound\ndelivery. Any of the   DENY  return codes will cause the message to be\nappropriately rejected.  The send_email hook  Parameters:   next, hmail  Called just as the email is about to be sent.  Respond with   next(DELAY, delay_seconds)  to defer sending the email at this time.  The get_mx hook  Parameters:   next, hmail, domain  Upon starting delivery the   get_mx  hook is called, with the parameter set to\nthe domain in question (for example a mail to   user@example.com  will call the\n  get_mx  hook with   (next, hmail, domain)  as parameters). This is to allow\nyou to implement a custom handler to find MX records. For most installations\nthere is no reason to implement this hook - Haraka will find the correct MX\nrecords for you.  The MX record is sent via next(OK, mx) and can be one of:   A string of one of the following formats:\n   hostname  hostname:port  ipaddress  ipaddress:port  An MX object of the form:   {priority: 0, exchange: hostname}  with the\nfollowing optional properies:\n*   port  to specify an alternate port\n*   bind  to specify an outbound IP address to bind to\n*   bind_helo  to specify an outbound helo for IP address to bind to\n*   using_lmtp  boolean to specify that delivery should be attempted using\nLMTP instead of SMTP.\n*    auth_user  to specify an AUTH username (required if AUTH is desired)\n*    auth_pass  to specify an AUTH password (required if AUTH is desired)\n*    auth_type  to specify an AUTH type that should be used with the MX.\nIf this is not specified then Haraka will pick an appropriate method.  A list of MX objects in an array, each in the same format as above.  The deferred hook  Parameters:   next, hmail, {delay: ..., err: ...}  If the mail is temporarily deferred, the   deferred  hook is called. The hook\nparameter is an object with keys:   delay  and   err , which explain the delay\n(in seconds) and error message.  If you want to stop at this point, and drop the mail completely, then you\ncan call   next(OK) .  If you want to change the delay, then call   next(DENYSOFT, delay_in_seconds) .\nUsing this you can define a custom delay algorithm indexed by\n  hmail.num_failures .  The bounce hook  Parameters:   next, hmail, error  If the mail completely bounces then the   bounce  hook is called. This is   not \ncalled if the mail is issued a temporary failure (a 4xx error code). The hook\nparameter is the error message received from the remote end as an   Error  object.\nThe object may also have the following properties:   mx - the MX object that caused the bounce  deferred_rcpt - the deferred recipients that eventually bounced  bounced_rcpt - the bounced recipients  If you do not wish to have a bounce message sent to the originating sender of the\nemail then you can return   OK  from this hook to stop it from sending a bounce message.  The delivered hook  Parameters:   next, hmail, params  Params is a list of:   [host, ip, response, delay, port, mode, ok_recips, secured]  When mails are successfully delivered to the remote end then the   delivered \nhook is called. The return codes from this hook have no effect, so it is only\nuseful for logging the fact that a successful delivery occurred.    host  - Hostname of the MX that the message was delivered to,   ip  - IP address of the host that the message was delivered to,   response  - Variable contains the SMTP response text returned by the host\nthat received the message and will typically contain the remote queue ID and   delay  - Time taken between the queue file being created and the\nmessage being delivered.   port  - Port number that the message was delivered to.   mode  - Shows whether SMTP or LMTP was used to deliver the mail.   ok_recips  - an   Address  1  array containing all of the recipients that were\nsuccessfully delivered to.   secured  - A boolean denoting if the connection used TLS or not.  Outbound IP address  Normally the OS will decide which IP address will be used for outbound\nconnections using the IP routing table.  There are instances where you may want to separate outbound traffic on\ndifferent IP addresses based on sender, domain or some other identifier.  \nTo do this, the IP address that you want to use   must  be bound to an\ninterface (or alias) on the local system.  As described above the outbound IP can be set using the   bind  parameter\nand also the outbound helo for the IP can be set using the   bind_ehlo \nparameter returned my the   get_mx  hook or during the reception of the message\nyou can set a transaction note in a plugin to tell Haraka which outbound IP\naddress you would like it to use when it tries to deliver the message:   connection.transaction.notes.outbound_ip = '1.2.3.4';\nconnection.transaction.notes.outbound_helo = 'mail-2.example.com';\n  Note: if the   get_mx  hook returns a   bind  and   bind_helo  parameter, then\nthis will be used in preference to the transaction note.  AUTH  If you wish to use AUTH for a particular domain or domains, or you wish to\nforce all mail to an outbound service or smart host that requires authentication\nthen you can use the   get_mx  hook documented above to do this by supplying\nboth   auth_user  and   auth_pass  properties in an MX object.  If AUTH properties are supplied and the remote end does not offer AUTH or there\nare no compatible AUTH methods, then the message will be sent without AUTH and\na warning will be logged.  Bounce Messages  The contents of the bounce message are configured by a file called\n  config/outbound.bounce_message . If you look at this file you will see it\ncontains several template entries wrapped in curly brackets. These will be\npopulated as follows:  Optional: Possibility to add HTML code (with optional image) to the bounce message is possible\nby adding the files   config/outbound.bounce_message_html . An image can be attached\nto the mail by using   config/outbound.bounce_message_image .   pid - the current process id  date - the current date when the bounce occurred  me - the contents of   config/me  from - the originating sender of the message  msgid - a uuid for the mail  to - the end recipient of the message, or the first recipient if it was to\nmultiple people  reason - the text from the remote server indicating why it bounced  Following the bounce message itself will be a copy of the entire original\nmessage.  Creating a mail internally for outbound delivery  Sometimes it is necessary to generate a new mail from within a plugin.  To do that, you can use the   outbound  module directly:     var   outbound   =   require  (  './outbound'  );\n   \n   var   plugin   =   this  ;\n   \n   var   to   =   'user@example.com'  ;\n   var   from   =   'sender@example.com'  ;\n   \n   var   contents   =   [\n       \"From: \"   +   from,\n       \"To: \"   +   to,\n       \"MIME-Version: 1.0\"  ,\n       \"Content-type: text/plain; charset=us-ascii\"  ,\n       \"Subject: Some subject here\"  ,\n       \"\"  ,\n       \"Some email body here\"  ,\n       \"\"  ].  join  (  \"  \\n  \"  );\n       \n   var   outnext   =   function   (  code  ,   msg  ) {\n       switch   (code) {\n           case   DENY  :  plugin.  logerror  (  \"Sending mail failed: \"   +   msg);\n                       break  ;\n           case   OK  :    plugin.  loginfo  (  \"mail sent\"  );\n                       next  ();\n                       break  ;\n           default  :    plugin.  logerror  (  \"Unrecognized return code from sending email: \"   +   msg);\n                       next  ();\n       }\n   };\n   \n   outbound.  send_email  (from, to, contents, outnext);\n  The callback on   send_email()  is passed   OK  if the mail is successfully\nqueued to disk, not when it is successfully delivered. To check delivery\nstatus you still need to hook   delivered  and   bounce  to know if it was\nsuccessfully delivered.  The callback parameter may be omitted if you don't need to handle errors\nshould queueing to disk fail e.g:     outbound.  send_email  (from, to, contents);\n  You can pass various options to   outbound.send_email  like so:     outbound.  send_email  (from, to, contents, outnext, options);\n  Where   options  is a Object that may contain the following keys:     Key/Value  Description     dot_stuffed: true  Use this if you are passing your content dot-stuffed (a dot at the start of a line is doubled, like it is in SMTP conversation, see   RFC 2821 .    notes: { key: value}  In case you need notes in the new transaction that   send_email()  creates.    remove_msgid: true  Remove any Message-Id header found in the message.  If you are reading a message in from the filesystem and you want to ensure that a generated Message-Id header is used in preference over the original.  This is useful if you are releasing mail from a quarantine.    remove_date: true  Remove any Date header found in the message.  If you are reading a message in from the filesystem and you want to ensure that a generated Date header is used in preference over the original.  This is useful if you are releasing mail from a quarantine.    origin: Object  Adds object as argument to logger.log calls inside outbound.send_email. Useful for tracking which Plugin/Connection/HMailItem object generated email.         outbound.  send_email  (from, to, contents, outnext, { notes: transaction.notes });\n   1 :   Address  objects are   address-rfc2821 objects .  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":144,"path":145,"dir":50,"title":146,"description":147,"keywords":148,"body":159},"content:6.core:13.Plugins.md","/core/Plugins","Plugins","Most aspects of receiving an email in Haraka are controlled by plugins. Mail cannot even be received unless at least a 'rcpt' and 'queue' plugin are\nenabled.",[149,150,151,152,153,154,124,155,156,157,158],"Plugin Lists","Anatomy of a Plugin","Available Hooks","Hook Order","Plugin Run Order","Skipping Plugins","Sharing State","Plugins as Modules","Shutdown","Further Reading","  Plugins  Most aspects of receiving an email in Haraka are controlled by plugins. Mail cannot even be received unless at least a 'rcpt' and 'queue' plugin are\nenabled.  Recipient (  rcpt ) plugins determine if a particular recipient is allowed to be relayed or received for. A   queue  plugin queues the message somewhere - normally to disk or to an another SMTP server.  Plugin Lists  Get a list of installed plugins by running   haraka -l . To include locally installed plugins, add the   -c /path/to/config  option.  We also have a   registry of known plugins .  Display the help text for a plugin by running:     haraka   -h   \u003C  nam  e  >   -c   /path/to/config`\n  Writing Haraka Plugins  Anatomy of a Plugin  Plugins in Haraka are JS files in the   plugins  directory (legacy) and npm\nmodules in the node_modules directory. See \"Plugins as Modules\" below.  Plugins can be installed in the Haraka global directory (default:\n/$os/$specific/lib/node_modules/Haraka) or in the Haraka install directory\n(whatever you chose when you typed   haraka -i . Example:   haraka -i /etc/haraka  To enable a plugin, add its name to   config/plugins . For npm packaged plugins, the name does not include the   haraka-plugin  prefix.  Register  Register is the only plugin function that is syncronous and receives no arguments. Its primary purpose is enabling your plugin to register SMTP hooks. It is also used for syncronous initialization tasks such as   loading a config file . For heavier initialization tasks such as establishing database connections, look to   init_master  and   init_child  instead.  Register a Hook  There are two ways for plugins to register hooks. Both examples register a function on the   rcpt  hook:   The   register_hook  function in register():  exports.register = function() {\nthis.register_hook('rcpt', 'my_rcpt_validate');\n};  exports.my_rcpt_validate = function (next, connection, params) {\n// do processing\nnext();\n};  The hook_  $name  syntax:  exports.hook_rcpt = function (next, connection, params) {\n// do processing\nnext();\n};  The register_hook function within   register()  offers a few advantages:   1. register a hook multiple times (see below)\n2. a unique function name in stack traces\n3. [a better function name](https://google.com/search?q=programming%20good%20function%20names)\n4. hooks can be registered conditionally (ie, based on a config setting)\n  Register a Hook Multiple Times  To register the same hook more than once, call   register_hook()  multiple times with the same hook name:     exports  .  register   =   function  () {\n       this  .  register_hook  (  'queue'  ,   'try_queue_my_way'  );\n       this  .  register_hook  (  'queue'  ,   'try_queue_highway'  );\n   };\n  When   try_queue_my_way()  calls   next() , the next function registered on hook   queue  will be called, in this case,   try_queue_highway() .  Determine hook name  When a single function runs on multiple hooks, the function can check the\n  hook  property of the   connection  or   hmail  argument to determine which hook it is running on:     exports  .  register   =   function  () {\n       this  .  register_hook  (  'rcpt'  ,      'my_rcpt'  );\n       this  .  register_hook  (  'rcpt_ok'  ,   'my_rcpt'  );\n   };\n    \n   exports  .  my_rcpt   =   function   (  next  ,   connection  ,   params  ) {\n       var   hook_name   =   connection.hook;   // rcpt or rcpt_ok\n       // email address is in params[0]\n       // do processing\n   }\n  Next()  After registering a hook, functions are called with that hooks arguments (see   Available Hooks  below. The first argument is a callback function, conventionally named   next . When the function is completed, it calls   next()  and the connection continues. Failing to call   next()  will result in the connection hanging until that plugin's timer expires.   next([code, msg])  accepts two optional parameters:    code  is one of the listed return codes.   msg  is a string to send to the client in case of a failure. Use an array to send a multi-line message.   msg  should NOT contain the code number - that is handled by Haraka.  Next() Return Codes  These constants are in your plugin when it is loaded, you do not\nneed to define them:   CONT  Continue and let other plugins handle this particular hook. This is the\ndefault. These are identical:   next()  and   next(CONT) ;  DENY - Reject with a 5xx error.  DENYSOFT - Reject with a 4xx error.  DENYDISCONNECT - Reject with a 5xx error and immediately disconnect.  DISCONNECT - Immediately disconnect  OK  Required by   rcpt  plugins to accept a recipient and   queue  plugins when the queue was successful.  After a plugin calls   next(OK) , no further plugins on that hook will run.  Exceptions to next(OK):   connect_init and disconnect hooks are   always called .  On the deny hook,   next(OK)  overrides the default CONT.  HOOK_NEXT  HOOK_NEXT is only available on the   unrecognized_command  hook. It instructs Haraka to run a different plugin hook. The   msg  argument must be set to the name of the hook to be run. Ex:   next(HOOK_NEXT, 'rcpt_ok');  Available Hooks  These are the hook and their parameters (next excluded):   init_master - called when the main (master) process is started  init_child - in cluster, called when a child process is started  init_http - called when Haraka is started.  init_wss - called after init_http  connect_init - used to init data structures, called for   every  connection  lookup_rdns - called to look up the rDNS - return the rDNS via   next(OK, rdns)  connect - called after we got rDNS  capabilities - called to get the ESMTP capabilities (such as STARTTLS)  unrecognized_command - called when the remote end sends a command we don't recognise  disconnect - called upon disconnect  helo (hostname)  ehlo (hostname)  quit  vrfy  noop  rset  mail (  from, esmtp_params )  rcpt (  to,   esmtp_params )  rcpt_ok (to)  data - called at the DATA command  data_post - called at the end-of-data marker  max_data_exceeded - called when the message exceeds connection.max_bytes  queue - called to queue the mail  queue_outbound - called to queue the mail when connection.relaying is set  queue_ok - called when a mail has been queued successfully  reset_transaction - called before the transaction is reset (via RSET, or MAIL)  deny - called when a plugin returns DENY, DENYSOFT or DENYDISCONNECT  get_mx (hmail, domain) - called by outbound to resolve the MX record  deferred (hmail, params) - called when an outbound message is deferred  bounce (hmail, err) - called when an outbound message bounces  delivered (hmail,   host, ip, response, delay, port, mode, ok_recips, secured, authenticated ) - called when outbound mail is delivered  send_email (hmail) - called when outbound is about to be sent  pre_send_trans_email (fake_connection) - called just before an email is queued to disk with a faked connection object  rcpt  The   rcpt  hook is slightly special.  When   connection.relaying == false  (the default, to avoid being an open relay), a rcpt plugin MUST return   next(OK)  or the sender will receive the error message \"I cannot deliver for that user\". The default   rcpt  plugin  is   rcpt_to.in_host_list , which lists the domains for which to accept email.  After a   rcpt  plugin calls   next(OK) , the   rcpt_ok  hook is run.  If a plugin prior to the   rcpt  hook sets   connection.relaying = true , then it is not necessary for a rcpt plugin to call   next(OK) .  connect_init  The   connect_init  hook is unique in that all return codes are ignored. This is so that plugins that need to do initialization for every connection can be assured they will run. Return values are ignored.  hook_init_http (next, Server)  If http listeners are are enabled in http.ini and the express module loaded, the express library will be located at Server.http.express. More importantly, the express   app / instance  will be located at Server.http.app. Plugins can register routes on the app just as they would with any   Express.js  app.  hook_init_wss (next, Server)  If express loaded, an attempt is made to load   ws , the websocket server. If it succeeds, the wss server will be located at Server.http.wss. Because of how websockets work, only one websocket plugin will work at a time. One plugin using wss is   watch .  pre_send_trans_email (next, fake_connection)  The   fake  connection here is a holder for a new transaction object. It only has the log methods and a   transaction  property\nso don't expect it to behave like a a real connection object. This hook is designed so you can add headers and modify mails\nsent via   outbound.send_email() , see the dkim_sign plugin for an example.  Hook Order  The ordering of hooks is determined by the SMTP protocol. Knowledge of   RFC 5321  is beneficial.  Typical Inbound Connection   hook_connect_init  hook_lookup_rdns  hook_connect  hook_helo   OR  hook_ehlo (EHLO is sent when ESMTP is desired which allows extensions\nsuch as STARTTLS, AUTH, SIZE etc.)\n   hook_helo  hook_ehlo\n   hook_capabilities   hook_unrecognized_command  is run for each ESMTP extension the client requests\ne.g. STARTTLS, AUTH etc.)  hook_mail  hook_rcpt (once per-recipient)  hook_rcpt_ok (for every recipient that hook_rcpt returned   next(OK)  for)  hook_data    attachment hooks  hook_data_post  hook_queue   OR  hook_queue_outbound  hook_queue_ok (called if hook_queue or hook_queue_outbound returns   next(OK) )  hook_quit   OR  hook_rset   OR  hook_helo   OR  hook_ehlo (after a message has been sent or rejected, the client can disconnect or start a new transaction with RSET, EHLO or HELO)\n   hook_reset_transaction  hook_disconnect  Typical Outbound mail  By 'outbound' we mean messages using Haraka's built-in queue and delivery\nmechanism. The Outbound queue is used when   connection.relaying = true  is set during the  transaction and   hook_queue_outbound  is called to queue the message.  The Outbound hook ordering mirrors the Inbound hook order above until after   hook_queue_outbound , which is followed by:   hook_send_email  hook_get_mx  at least one of:\n   hook_delivered  (once per delivery domain with at least one successful recipient)  hook_deferred  (once per delivery domain where at least one recipient or connection was deferred)  hook_bounce  (once per delivery domain where the recipient(s) or message was rejected by the destination)  Plugin Run Order  Plugins are run on each hook in the order that they are specified in   config/plugins . When a plugin returns anything other than   next()  on a hook, all subsequent plugins due to run on that hook are skipped (exceptions: connect_init, disconnect).  This is important as some plugins might rely on   results  or   notes  that have been set by plugins that need to run before them. This should be noted in the plugins documentation. Make sure to read it.  If you are writing a complex plugin, you may have to split it into multiple plugins to run in a specific order e.g. you want hook_deny to run last after all other plugins and hook_lookup_rdns to run first, then you can explicitly register your hooks and provide a   priority  value which is an integer between -100 (highest priority) to 100 (lowest priority) which defaults to 0 (zero) if not supplied.  You can apply a priority to your hook in the following way:     exports  .  register   =   function  () {\n       var   plugin   =   this  ;\n       plugin.  register_hook  (  'connect'  ,    'hook_connect'  ,   -  100  );\n   }\n  This would ensure that your hook_connect function will run before any other\nplugins registered on the   connect  hook, regardless of the order it was\nspecified in   config/plugins .  Check the order that the plugins will run on each hook by running:     haraka   -o   -c   /path/to/config\n  Skipping Plugins  Plugins can be skipped at runtime by pushing the name of the plugin into the   skip_plugins  array in   transaction.notes .  This array is reset for every transaction and once a plugin is added to the list, it will not run any hooks in that plugin for the remainder of the transaction.  For example, one could create a whitelist plugin that skipped   spamassassin  if the sender was in a whitelist.  Logging  Plugins inherit all the logging methods of   logger.js , which are:   logprotocol  logdebug  loginfo  lognotice  logwarn  logerror  logcrit  logalert  logemerg  If plugins throw an exception when in a hook, the exception will be caught\nand generate a logcrit level error. However, exceptions will not be caught\nas gracefully when plugins are running async code. Use error codes for that,\nlog the error, and run your next() function appropriately.  Sharing State  There are several cases where you might need to share information between\nplugins.  This is done using   notes  - there are three types available:   server.notes  Available in all plugins.  This is created at PID start-up and is shared\namongst all plugins on the same PID and listener.\nTypical uses for notes at this level would be to share database\nconnections between multiple plugins or connection pools etc.  connection.notes  Available on any hook that passes 'connection' as a function parameter.\nThis is shared amongst all plugins for a single connection and is\ndestroyed after the client disconnects.\nTypical uses for notes at this level would be to store information\nabout the connected client e.g. rDNS names, HELO/EHLO, white/black\nlist status etc.  connection.transaction.notes  Available on any hook that passes 'connection' as a function parameter\nbetween hook_mail and hook_data_post.\nThis is shared amongst all plugins for this transaction (e.g. MAIL FROM\nthrough until a message is received or the connection is reset).\nTypical uses for notes at this level would be to store information\non things like greylisting which uses client, sender and recipient\ninformation etc.  hmail.todo.notes  Available on any outbound hook that passes   hmail  as a function parameter.\nThis is the same object as 'connection.transaction.notes', so anything\nyou store in the transaction notes is automatically available in the\noutbound functions here.  All of these notes are JS objects - use them as simple key/value store e.g.     connection.transaction.notes.test   =   'testing'  ;\n  Plugins as Modules  Plugins as NPM modules are named with the   haraka-plugin  prefix. Therefore, a\nplugin that frobnobricates might be called   haraka-plugin-frobnobricate  and\npublished to NPM with that name. The prefix is not required in the\n  config/plugins  file.  Plugins loaded as NPM modules behave slightly different than plugins loaded\nas plain JS files.  Plain JS plugins have a custom   require()  which allows loading core Haraka\nmodules via specifying   require('./name')  (note the   ./  prefix). Although\nthe core modules aren't in the same folder, the custom   require  intercepts\nthis and look for core modules. Note that if there is a module in your plugins\nfolder of the same name that will not take preference, so avoid using names\nsimilar to core modules.  Plugins loaded as modules do not have the special   require() . To load\na core Haraka module you must use   this.haraka_require('name') .\nThis should also be preferred for plain JS plugins, as the\n  ./  hack is likely to be removed in the future.  Plugins loaded as modules are not compiled in the Haraka plugin sandbox,\nwhich blocks access to certain globals and provides a global   server  object.\nTo access the   server  object, use   connection.server  instead.  Module plugins support default config in their local   config  directory. See the\n\"Default Config and Overrides\" section in   Config .  Shutdown  On graceful reload, Haraka will call a plugin's   shutdown  method.  This is so you can clear any timers or intervals, or shut down any connections\nto remote servers. See   Issue 2024 .  e.g.     exports  .  shutdown   =   function   () {\n       clearInterval  (  this  ._interval);\n   }\n  If you don't implement this in your plugin and have a connection open or a\ntimer running then Haraka will take 30 seconds to shut down and have to\nforcibly kill your process.  Note: This only applies when running with a   nodes=...  value in smtp.ini.  See also,   Results  Further Reading  Read about the   Connection  object.  Outbound hooks are   also documented .  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":161,"path":162,"dir":50,"title":163,"description":164,"keywords":165,"body":167},"content:6.core:14.Results.md","/core/Results","Results","Add, log, retrieve, and share the results of plugin tests.",[166],"Synopsis","  Results  Add, log, retrieve, and share the results of plugin tests.  Synopsis  Moved to   https://github.com/haraka/haraka-results",{"id":169,"path":170,"dir":50,"title":171,"description":172,"keywords":173,"body":174},"content:6.core:15.Transaction.md","/core/Transaction","Transaction Object","An SMTP transaction is valid from MAIL FROM time until RSET or \"final-dot\".",[54],"  Transaction Object  An SMTP transaction is valid from MAIL FROM time until RSET or \"final-dot\".  API   transaction.uuid  A unique UUID for this transaction. Is equal to the connection.uuid + '.N'\nwhere N increments for each transaction on this connection.   transaction.mail_from  The value of the MAIL FROM command as an   Address  1  object.   transaction.rcpt_to  An Array of   Address  1  objects of recipients from the RCPT TO command.   transaction.message_stream  A node.js Readable Stream object for the message.  You use it like this:     transaction.message_stream.  pipe  (WritableStream, options)\n  Where WritableStream is a node.js Writable Stream object such as a\nnet.socket, fs.writableStream, process.stdout/stderr or custom stream.  The options argument should be an object that overrides the following\nproperties:         *   line_endings   (default:   \"  \\r\\n  \"  )\n       *   dot_stuffing   (default:   false  )\n       *   ending_dot     (default:   false  )\n       *   end            (default:   true  )\n       *   buffer_size    (default:   65535  )\n       *   clamd_style    (default:   false  )\n  e.g.     transaction.message_stream.  pipe  (socket, { dot_stuffing:   true  , ending_dot:   true   });\n   transaction.data_bytes  The number of bytes in the email after DATA.   transaction.add_data(line)  Adds a line of data to the email. Note this is RAW email - it isn't useful\nfor adding banners to the email.   transaction.notes  A safe place to store transaction specific values. See also   haraka-results  and   haraka-notes .   transaction.add_leading_header(key, value)  Adds a header to the top of the header list.  This should only be used in\nvery specific cases.  Most people will want to use   add_header()  instead.   transaction.add_header(key, value)  Adds a header to the email.   transaction.remove_header(key)  Deletes a header from the email.   transaction.header  The header of the email. See   Header Object .   transaction.parse_body = true|false   default: false  Set to   true  to enable parsing of the mail body. Make sure you set this in\nhook_data or before.   transaction.body  The body of the email if you set   parse_body  above. See   Body Object .   transaction.attachment_hooks(start)  Sets a callback for when we see an attachment if   parse_body  has been set.  The   start  event will receive   (content_type, filename, body, stream)  as\nparameters.  The stream is a   ReadableStream  - see   http://nodejs.org/api/stream.html  for\ndetails on how this works.  If you set stream.connection then the stream will apply backpressure to the\nconnection, allowing you to process attachments before the connection has\nended. Here is an example which stores attachments in temporary files using\nthe   tmp  library from npm and tells us the size of the file:     exports  .  hook_data   =   function   (  next  ,   connection  ) {\n       // enable mail body parsing\n       connection.transaction.parse_body   =   true  ;\n       connection.transaction.  attachment_hooks  (\n           function   (  ct  ,   fn  ,   body  ,   stream  ) {\n               start_att  (connection, ct, fn, body, stream)\n           }\n       );\n       next  ();\n   }\n   \n   function   start_att   (  connection  ,   ct  ,   fn  ,   body  ,   stream  ) {\n       connection.  loginfo  (  \"Got attachment: \"   +   ct   +   \", \"   +   fn   +   \" for user id: \"   +   connection.transaction.notes.hubdoc_user.email);\n       connection.transaction.notes.attachment_count  ++  ;\n   \n       stream.connection   =   connection;   // Allow backpressure\n       stream.  pause  ();\n   \n       var   tmp   =   require  (  'tmp'  );\n   \n       tmp.  file  (  function   (  err  ,   path  ,   fd  ) {\n           connection.  loginfo  (  \"Got tempfile: \"   +   path   +   \" (\"   +   fd   +   \")\"  );\n           var   ws   =   fs.  createWriteStream  (path);\n           stream.  pipe  (ws);\n           stream.  resume  ();\n           ws.  on  (  'close'  ,   function   () {\n               connection.  loginfo  (  \"End of stream reached\"  );\n               fs.  fstat  (fd,   function   (  err  ,   stats  ) {\n                   connection.  loginfo  (  \"Got data of length: \"   +   stats.size);\n                   // Close the tmp file descriptor\n                   fs.  close  (fd,   function  (){});\n               });\n           });\n       });\n   }\n   transaction.discard_data = true|false   default: false  Set this flag to true to discard all data as it arrives and not store in\nmemory or on disk (in the message_stream property). You can still access\nthe attachments and body if you set parse_body to true. This is useful\nfor systems which do not need the full email, just the attachments or\nmail text.   transaction.set_banner(text, html)  Sets a banner to be added to the end of the email. If the html part is not\ngiven (optional) then the text part will have each line ending replaced with\n  \u003Cbr/>  when being inserted into HTML parts.   transaction.add_body_filter(ct_match, filter)  Adds a filter to be applied to body parts in the email.  ct_match should be a\nregular expression to match against the full content-type line, or a string to\nmatch at the start, e.g.   /^text\\/html/  or   'text/plain' .  filter will be\ncalled when each body part matching ct_match is complete.  It receives three\nparameters, the content-type line, the encoding name, and a buffer with the\nfull body part.  It should return a buffer with the desired contents of the\nbody in the same encoding.   transaction.results  Store results of processing in a structured format. See   docs/Results   1 :   Address  objects are address-rfc2821 objects. See   https://github.com/haraka/node-address-rfc2821  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":176,"path":177,"dir":178,"title":179,"description":180,"keywords":181,"body":185},"content:7.tutorials:Migrating_from_v1_to_v2.md","/tutorials/migrating_from_v1_to_v2","tutorials","Migrating from Haraka v1.x to v2.x","Haraka v2.x contains two significant changes to the v1.x API related to\nstreams.",[182,183,184],"Changes To Look For","Fixing data_lines plugins","Fixing attachment_hooks plugins","  Migrating from Haraka v1.x to v2.x  Haraka v2.x contains two significant changes to the v1.x API related to\nstreams.  Streams are an abstraction over a data flow that is provided by Node core\nand is used throughout node to \"pipe\" data between two places or more. This\nmakes programming very easy, and is hence why we started using them in Haraka\nstarting with version 2.0.0.  For more information about the Stream API, see\n  http://nodejs.org/api/stream.html  It's important to note that if you are using standard Haraka plugins then\nit's very unlikely you will need to change anything. Though you may want\nto configure   spool_dir  and   spool_after  in   config/smtp.ini . However if\nyou have written custom plugins, continue reading.  Changes To Look For  Firstly, the incoming data in an email (the email body) is now stored in an\nobject which you can treat as a ReadableStream. To find if this is relevant\nfor you, look for instances of   data_lines  in your plugins.  Secondly, if you parse the mail body, attachments are now provided as a\nstream, rather than custom start/data/end events. To find if this is relevant\nfor you, look for instances of   attachment_hooks  in your plugins.  Fixing data_lines plugins  Any plugins now working on each line of data will need to change to using a\nstream. The stream is called   transaction.message_stream .  These changes may be complicated if you are iterating over each line and\ndoing something with the strings therein. However if you are piping the data\nto an application or over a network, your code will become significantly\nsimpler (and a lot faster).  In v1.x Haraka populated the   transaction.data_lines  array for each line of\ndata received.  If you were writing the data to a socket then you had to handle backpressure manually by checking the return of   write()  and adding\n  on('drain')  handlers like so:     var   data_marker   =   0  ;\n   var   in_data   =   false  ;\n   var   end_pending   =   true  ;\n   var   send_data   =   function   () {\n       in_data   =   true  ;\n       var   wrote_all   =   true  ;\n       while   (wrote_all   &&   (data_marker   \u003C   connection.transaction.data_lines.  length  )) {\n           var   line   =   connection.transaction.data_lines[data_marker];\n           data_marker  ++  ;\n           wrote_all   =   socket.  write  (Buffer.  from  (line.  replace  (  /  ^  \\.  /  ,   '..'  ).  replace  (  /  \\r  ?  \\n  /  g  ,   '  \\r\\n  '  )),   'binary'  );\n           if   (  !  wrote_all)   return  ;\n       }\n       // we get here if wrote_all still true, and we got to end of data_lines\n       if   (end_pending) {\n           end_pending   =   false  ;\n           // Finished...\n           socket.  send_command  (  'dot'  );\n       }\n   };\n   socket.  on  (  'drain'  ,   function   () {\n       if   (end_pending   &&   in_data) {\n           setImmediate  (  function   () {   send_data  () });\n       }\n   });\n  In v2.x this now becomes:     connection.transaction.message_stream.  pipe  (socket, {dot_stuffing:   true  , ending_dot:   true  });\n  This automatically chunks the data, handles backpressure and will apply any\nnecessary format changes.  See   docs/Transaction.md  for the full details.  If you need to handle the input data by line, then you will need to create\nyour own writable stream and then pipe the message to the stream and then\nextract the lines from the stream of data.  See   plugins/dkim_sign.js  for\nan example.  Fixing attachment_hooks plugins  For v1.x you passed in functions to   transaction.attachment_hooks()  as\nfollows:     transaction.  attachment_hooks  (\n       function   (  ctype  ,   filename  ,   body  ) {  ...  },   // start\n       function   (  buf  ) {  ...  },   // data\n       function   () {  ...  }   // end\n   );\n  That has now changed to:     transaction.  attachment_hooks  (\n       function   (  ctype  ,   filename  ,   body  ,   stream  ) {  ...  },   // start\n   );\n  This allows you to attach the stream to other streams via   stream.pipe(dest) .  Sometimes destination streams will apply backpressure on the sending stream,\nfor example if you are sending attachments to a remote service. In order\nfor this backpressure to apply to the connection itself (so that we don't\nhave to buffer up data in memory), we need to provide the connection object\nto the stream:     var   transaction   =   connection.transaction;\n   transaction.  attachment_hooks  (\n       function   (  ctype  ,   filename  ,   body  ,   stream  ) {\n           stream.connection   =   connection;\n           ...\n       }\n   );\n  For a full example of using attachment streams, see the Transaction.md\ndocumentation file.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":187,"path":188,"dir":178,"title":189,"description":190,"keywords":191,"body":194},"content:7.tutorials:SettingUpOutbound.md","/tutorials/settingupoutbound","Configuring Haraka For Outbound Email","It is trivially easy to configure Haraka as an outbound email server. But\nfirst there are external things you may want to sort out:",[192,193],"First Some Background","The Setup","  Configuring Outbound Email  It is trivially easy to configure Haraka as an outbound email server. But\nfirst there are external things you may want to sort out:   Get your DNS PTR record working - make sure it matches the A record of the\nhost you are sending from.  Consider implementing an SPF record. I don't personally do this, but some\npeople seem to think it helps.  There's lots of information elsewhere on the internet about getting these\nthings working, and they are specific to your network and your DNS hosting.  First Some Background  Sending outbound mail through Haraka is called \"relaying\", and that is the\nterm the internals use. The process is simple - if a plugin in Haraka tells\nthe internals that this mail is to be relayed, then it gets queued in the\n\"queue\" directory for delivery. Then it will go through several delivery\nattempts until it is either successful or fails hard for some reason. A\nhard failure will result in a bounce email being sent to the \"MAIL FROM\"\naddress used when connecting to Haraka. If that address also bounces then\nit is considered a \"double bounce\" and Haraka will log an error and drop it\non the floor.  The Setup  Outbound mail servers should run on port 587 and enforce authentication. This\nis slightly different from the \"old\" model where there would simply be a\ncheck based on the connecting IP address to see if it was valid to relay.\nNote however that Haraka doesn't stop you doing it this way - we just don't\nprovide a plugin to do that by default - you will have to write one. The\nreason is purely based on security and personal preference.  Let's create a new Haraka instance:   haraka -i haraka-outbound\ncd haraka-outbound\n  Now edit config/smtp.ini - change the port to 587.  Next we setup our plugins - all we need is the tls and auth plugin. AUTH capability is only advertised after TLS/SSL negotiation (except for connections from the local host):   echo \"tls\nauth/flat_file\" > config/plugins\n  Now edit the flat file password file, and put in an appropriate username\nand password:   vi config/auth_flat_file.ini\n  See the documentation in docs/plugins/auth/flat_file.md for information about\nwhat can go in that file.  Now you can start Haraka. That's all the configuration you need.   haraka -c .\n  Now in another window you can run swaks to test this - be sure to substitute\nan email address you can monitor in place of   youremail@yourdomain.com , and the\nusername and password you added for the --auth-user and --auth-password params:   swaks --to youremail@yourdomain.com --from test@example.com --server localhost \\\n  --port 587 --auth-user testuser --auth-password testpassword\n  Watch the output of swaks and ensure no errors have occurred. Then watch\nthe recipient email address (easiest to make this your webmail account) and\nsee that the email arrived.  You are done!",{"id":196,"path":197,"dir":178,"title":198,"description":199,"keywords":200,"body":206},"content:7.tutorials:Tutorial.md","/tutorials/tutorial","Writing Haraka Plugins","Part of the joy of using Haraka as your main mail server is having a strong\nplugin based system which means you control all aspects of how your mail is\nprocessed, accepted, and delivered.",[201,202,15,203,204,205],"The Design","What You Will Need","Parsing Out The Date","Rejecting Expired Emails","Fixing Up Unexpired Emails","  Writing Haraka Plugins  Part of the joy of using Haraka as your main mail server is having a strong\nplugin based system which means you control all aspects of how your mail is\nprocessed, accepted, and delivered.  Of course in order to control this you may at some point need to edit some\nsort of plugin file of your own to customise how things work. The good news\nis that writing plugins in Haraka is simple, even for novice coders. You\njust need a little knowledge of Javascript (and maybe some understanding of\nNode.js) and the world is your oyster.  This tutorial will run through a simple plugin which allows you to have\nemail addresses that expire in a short period of time. This is handy if you\nwant a   disposable email address  to use to sign up for a web site that you\ndon't wish to continually receive communication from.  The Design  In order to make this simple, we are going to simply let you have tagged\nemail addresses such as   user-20120515@domain.com  which will expire on the\n15th May, 2012. Haraka will then check the email has yet to expire, and\nreject mails to that address after the expiry date. If the address hasn't\nexpired yet it will re-write the address to   user@domain.com  before onward\ndelivery.  What You Will Need   Node.js and npm  Haraka  A text editor   swaks  A screwdriver  Getting Started  First install Haraka via npm if you haven't already:     sudo   npm   -g   install   Haraka\n  Now we can create our project directory to get started with:     haraka   -i   /path/to/new_project\n  Make sure you use a directory that doesn't exist for your project.  Next, let's create a new plugin:     haraka   -c   /path/to/new_project   -p   rcpt_to.disposable\n  This should output a bunch of information about files it has created:     Plugin   rcpt_to.disposable   created\n   Now   edit   javascript   in:      /path/to/new_project/plugins/rcpt_to.disposable.js\n   Add   the   plugin   to   config:    /path/to/new_project/config/plugins\n   And   edit   documentation   in:   /path/to/new_project/docs/plugins/rcpt_to.disposable.md\n  So let's do the second part now - load up the   config/plugins  file and lets\nset this up to test things. Comment out most of the plugins, except for\n  rcpt_to.in_host_list  and add in our new plugin, and change the queue\nplugin to   test_queue . The final file should look like this:     # default list of plugins\n   \n   # block mails from known bad hosts (see config/dnsbl.zones for the DNS zones queried)\n   #dnsbl\n   \n   # allow bad mail signatures from the config/data.signatures file.\n   #data.signatures\n   \n   # block mail from some known bad HELOs - see config/helo.checks.ini for configuration\n   #helo.checks\n   \n   # block mail from known bad email addresses you put in config/mail_from.blocklist\n   #mail_from.blocklist\n   \n   # Only accept mail where the MAIL FROM domain is resolvable to an MX record\n   #mail_from.is_resolvable\n   \n   # Allow dated tagged addresses\n   rcpt_to.disposable\n   \n   # Only accept mail for your personal list of hosts\n   rcpt_to.in_host_list\n   \n   # Queue mail via qmail-queue\n   #queue/qmail-queue\n   \n   queue/test\n  Remember that the ordering here is important - our new plugin has to come\nbefore   rcpt_to.in_host_list .  Now fire up your favourite editor and put the following into\nthe   plugins/rcpt_to.disposable.js  file:     exports  .  hook_rcpt   =   function   (  next  ,   connection  ,   params  ) {\n       var   rcpt   =   params[  0  ];\n       this  .  loginfo  (  \"Got recipient: \"   +   rcpt);\n       next  ();\n   }\n  All we are doing here is logging the fact that we got the recipient.  Check this works. You'll need two terminal windows. In window 1:     echo   LOGDEBUG   >   config/loglevel\n   echo   myserver.com   >>   config/host_list\n   sudo   haraka   -c   /path/to/new_project\n  And in window 2:     swaks   -h   domain.com   -t   booya@myserver.com   -f   somewhere@example.com   \\\n   -s   localhost   -p   25\n  In the logs you should see:     [INFO] [rcpt_to.disposable] Got recipient:   \u003C  booya@myserver.com  >\n  Which indicates everything is working. You should also have a file\n  /tmp/mail.eml  containing the email that swaks sent.  Parsing Out The Date  Now lets check for emails with an expire date in them and turn them into\n  Date  objects. Edit your plugin file as follows:     exports  .  hook_rcpt   =   function   (  next  ,   connection  ,   params  ) {\n       var   rcpt   =   params[  0  ];\n       this  .  loginfo  (  \"Got recipient: \"   +   rcpt);\n       \n       // Check user matches regex 'user-YYYYMMDD':\n       var   match   =   /  ^  (  .  *  )-(  \\d  {4}  )(  \\d  {2}  )(  \\d  {2}  )  $  /  .  exec  (rcpt.user);\n       if   (  !  match) {\n           return   next  ();\n       }\n       \n       // get date - note Date constructor takes month-1 (i.e. Dec == 11).\n       var   expiry_date   =   new   Date  (match[  2  ], match[  3  ]  -  1  , match[  4  ]);\n       \n       this  .  loginfo  (  \"Email expires on: \"   +   expiry_date);\n       \n       next  ();\n   }\n  Start haraka again and pass it the following email via swaks:     swaks   -h   domain.com   -t   booya-20120101@myserver.com   \\\n     -f   somewhere@example.com   -s   localhost   -p   25\n  And you should see now in the logs:     [INFO] [rcpt_to.disposable] Got recipient:   \u003C  booya-20120101@myserver.com  >\n   [INFO] [rcpt_to.disposable] Email expires on: Sun, 01 Jan 2012 05:00:00 GMT\n  The exact time may vary depending on your timezone, but it should be obvious\nwe now have a date object, which we can now compare to the current date.  Rejecting Expired Emails  The next edit we have to do is to add in code to compare to the current date\nand reject expired emails. Again, this is very simple:     exports  .  hook_rcpt   =   function   (  next  ,   connection  ,   params  ) {\n       var   rcpt   =   params[  0  ];\n       this  .  loginfo  (  \"Got recipient: \"   +   rcpt);\n   \n       // Check user matches regex 'user-YYYYMMDD':\n       var   match   =   /  ^  (  .  *  )-(  \\d  {4}  )(  \\d  {2}  )(  \\d  {2}  )  $  /  .  exec  (rcpt.user);\n       if   (  !  match) {\n           return   next  ();\n       }\n   \n       // get date - note Date constructor takes month-1 (i.e. Dec == 11).\n       var   expiry_date   =   new   Date  (match[  2  ], match[  3  ]  -  1  , match[  4  ]);\n   \n       this  .  loginfo  (  \"Email expires on: \"   +   expiry_date);\n       \n       var   today   =   new   Date  ();\n       \n       if   (expiry_date   \u003C   today) {\n           // If we get here, the email address has expired\n           return   next  (  DENY  ,   \"Expired email address\"  );\n       }\n       \n       next  ();\n   }\n  And we can easily check that with swaks (remember to restart Haraka):     swaks   -h   foo.com   -t   booya-20110101@haraka.local   -f   somewhere@example.com   \\\n     -s   localhost   -p   25\n   ===   Trying   localhost:25...\n   ===   Connected   to   localhost.\n   \u003C  -  220 sergeant.org ESMTP Haraka 0.3 ready\n    -  >   EHLO   foo.com\n   \u003C  -  250-Haraka says hi Unknown [127.0.0.1]\n   \u003C  -  250-PIPELINING\n   \u003C  -  250-8BITMIME\n   \u003C  -  250 SIZE 500000\n    -  >   MAIL   FROM:  \u003C  somewhere@example.co  m  >\n   \u003C  -  250 From address is OK\n    -  >   RCPT   TO:  \u003C  booya-20110101@haraka.loca  l  >\n   \u003C**   550 Expired email address\n    -  >   QUIT\n   \u003C  -  221 closing connection. Have a jolly good day.\n   ===   Connection   closed   with   remote   host.\n  Now we need to do one more thing...  Fixing Up Unexpired Emails  The last thing we need to do, is if we have an email that isn't expired, we\nneed to normalise it back to the real email address, because wherever we\ndeliver this to is unlikely to recognise these new email addresses.  Here's how our final plugin will look:     exports  .  hook_rcpt   =   function   (  next  ,   connection  ,   params  ) {\n       var   rcpt   =   params[  0  ];\n       this  .  loginfo  (  \"Got recipient: \"   +   rcpt);\n   \n       // Check user matches regex 'user-YYYYMMDD':\n       var   match   =   /  ^  (  .  *  )-(  \\d  {4}  )(  \\d  {2}  )(  \\d  {2}  )  $  /  .  exec  (rcpt.user);\n       if   (  !  match) {\n           return   next  ();\n       }\n   \n       // get date - note Date constructor takes month-1 (i.e. Dec == 11).\n       var   expiry_date   =   new   Date  (match[  2  ], match[  3  ]  -  1  , match[  4  ]);\n   \n       this  .  loginfo  (  \"Email expires on: \"   +   expiry_date);\n   \n       var   today   =   new   Date  ();\n   \n       if   (expiry_date   \u003C   today) {\n           // If we get here, the email address has expired\n           return   next  (  DENY  ,   \"Expired email address\"  );\n       }\n       \n       // now get rid of the extension:\n       rcpt.user   =   match[  1  ];\n       this  .  loginfo  (  \"Email address now: \"   +   rcpt);\n       \n       next  ();\n   }\n  And when we test this with an unexpired address via swaks:     swaks   -h   foo.com   -t   booya-20120101@haraka.local   \\\n         -f   somewhere@example.com   -s   localhost   -p   25\n  We get in the logs:   [INFO] [rcpt_to.disposable] Got recipient: \u003Cbooya-20120101@haraka.local>\n[INFO] [rcpt_to.disposable] Email expires on: Sun Jan 01 2012 00:00:00 GMT-0500 (EST)\n[INFO] [rcpt_to.disposable] Email address now: \u003Cbooya@haraka.local>\n  Which indicates that we have successfully modified the email address.  Further Reading  There are many more features of the Haraka API to explore, including access\nto the body of the email and the headers, access to the HELO string, and\nimplementing ESMTP extensions, among many others.  There are two good places to read up on these. Firstly is the documentation\nin the Haraka \"docs\" directory. Start with the   Plugins.md  file, and work\nyour way through the API from there.  The second place is simply reading the source code for the plugins themselves.\nThe plugins that Haraka ships with use almost all parts of the API and so\nshould give you a good starting point if you want to implement a particular\npiece of functionality. Even the most complicated plugins are under 200 lines\nof code, so don't be intimidated by them! The simplest one is a mere 5 lines\nof code.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":208,"path":209,"dir":7,"title":146,"description":210,"keywords":211,"body":214},"content:8.plugins.md","/plugins","Plugins is a collection of plugins for Haraka that extend its functionality.",[212,213],"Installing NPM packaged plugins","Plugin Registry","  Plugins  To create your own plugin, see   Write a Plugin .  Installing NPM packaged plugins  Plugins can be installed in the directory where Haraka was installed (where depends on your OS platform and whether you specified   -g ) or the Haraka install directory (haraka -i this_path). This example installs   my-great-plugin  in the Haraka install directory:   cd /etc/haraka\nnpm install haraka-plugin-my-great-plugin\n  NPM then installs the plugin and its dependencies in a   node_modules  directory within the Haraka install directory.  Plugin Registry  A comprehensive list of known plugins. Create a PR to add yours to these lists.  Auth Plugins     Name  Description     auth-enc-file  Auth against user/pass in an encrypted file    flat_file  Auth against user/pass in a file    auth_bridge  Auth against remote MTA    auth-imap  Auth against IMAP server    auth_ldap  Auth against LDAP    auth_proxy  Auth against remote MTA    auth_vpopmaild  Auth against vpopmaild    dkim  DKIM sign & verify    dovecot  SMTP AUTH & recipient validation against dovecot    LDAP  Aliases, Auth, and Recipient validation from LDAP    mailauth  Email Auth (SPF, DKIM, DMARC, ARC, & BIMI)    opendkim  DKIM sign and verify email messages    spf  Perform SPF checks  Queue Plugins     Name  Description     discard  queues messages to /dev/null    kafka  Queue inbound mail to a Kafka topic    lmtp  deliver queued messages via LMTP    mongodb  Queue emails to MongoDB    qmail-queue  queue to qmail    quarantine  queue to a quarantine directory    rabbitmq  queue to RabbitMQ    rabbitmq_amqplib  queue to RabbitMQ using amqplib    rails  queue messages to a Rails app using   Action Mailbox    smtp_bridge  Bridge SMTP sessions to another MTA    smtp_forward  Forward emails to another MTA    smtp_proxy  Proxy SMTP connections to another MTA    wildduck  queue messages to Wild Duck  Filtering Plugins     Name  Description     attachment  Restrict attachment types    avg  AVG antivirus scanner    clamd  Anti-Virus scanning with ClamAV    data.signatures  Block emails whose bodies match signatures    dcc  Distributed Checksum Clearinghouse    esets  Virus scanning with ESET Mail Security    messagesniffer  Anti-spam via   MessageSniffer    milter  milter support    rspamd  Scan emails with rspamd    spamassassin  Scan emails with SpamAssassin    uribl  Block based on URI blacklists  Every other Plugin     Name  Description     access  ACLs based on IPs, domains, email addrs, etc.    accounting_files  Retrieve, Store and Archive custom information of outbound traffic    aliases  Email aliases    ASN  Get ASN info for remote senders    block_me  Populate block list via forwarded emails    bounce  Many options for bounce processing    delay_deny  Delays all pre-DATA 'deny' results    dns-list  Check remote MTAs against DNS black, white, and karma lists    dovecot  Recipient validation & SMTP AUTH against dovecot    early_talker  Reject remotes that talk early    fcrdns  Forward Confirmed reverse DNS    geoip  get geographic information about mail senders    greylist  Greylisting    headers  Inspect and verify various email headers    helo.checks  Validity checks of the HELO string    karma  Dynamic scoring of incoming connections    known-senders  Reward emails from those you send mail to    LDAP  Aliases, Auth, and Recipient validation from LDAP    Limit  Apply many types of limits to SMTP connections    elasticsearch  Store message metadata in Elasticsearch    log reader  extract log entries from the haraka log file    syslog  Log to syslog    mail_from.is_resolvable  Verifies the MAIL FROM domain resolves to a MX    outbound-logger  JSON logging of outbound email traffic. Logs useful metadata about delivered/bounced emails    p0f  TCP Fingerprinting    prevent_credential_leaks  Prevent users from emailing their credentials    process_title  Populate   ps  output with activity counters    recipient-routes  Route emails based on their recipient(s)    redis  multi-purpose Redis db connection(s)    rcpt_to.in_host_list  Define local email domains in a file    rcpt_to.ldap  Validate recipients against LDAP    rcpt-postgresql  validate recipients against PostgreSQL    qmail-deliverable  Validate recipients against Qmail-Deliverable    record_envelope_addresses  Adds message headers with ENV recips    relay  Manage relay permissions    reseed_rng  Reseed the RNG    batv-srs  BATV & SRS    srs  Sender Rewriting Scheme    tarpit  Slow down connections    tls  Implements TLS    toobusy  Defers connections when too busy    vmta  Virtual MTA management    watch  Watch live SMTP traffic in a web interface    wildduck  provides recipient checks against Wild Duck    xclient  Implements XCLIENT",{"id":216,"path":217,"dir":218,"title":219,"description":220,"keywords":221,"body":222},"content:8.plugins:access.md","/plugins/access","plugins","access - ACLs for Haraka plugin for Haraka","Haraka access plugin - ACLs for Haraka",[],"  Access plugin  Repackaged as   haraka-plugin-access .",{"id":224,"path":225,"dir":218,"title":226,"description":227,"keywords":228,"body":231},"content:8.plugins:aliases.md","/plugins/aliases","aliases - Alias plugin for Haraka","Haraka aliases plugin - Alias plugin for Haraka",[229,230],"Configuration","Example Configuration","  Aliases plugin  This plugin allows one to configure aliases that may perform an action or\nchange the RCPT address in a number of ways.  All aliases are specified in\na JSON formatted configuration file, and must have at very least an action.\nAny syntax error found in the JSON format config file will stop the server\nfrom running.  IMPORTANT: this plugin must appear in   config/plugins  before other plugins\nthat run on hook_rcpt  WARNING: DO NOT USE THIS PLUGIN WITH queue/smtp_proxy.  Configuration   aliases  JSON formatted configuration file that must contain, at very least, a key\nto match against RCPT address, and a value that is an associative array\nwith an \"action\" : \"  \" key, value pair.  An example:     { \"test1\" : { \"action\" : \"drop\" } } \n  In the above example the \"test1\" alias will drop any message that matches\ntest1, or test1-* or test1+* (wildcard '-' or '+', see below).  Actions\nmay in turn have 0 or more options listed with them like so:     { \"test3\" : { \"action\" : \"alias\", \"to\" : \"test3-works\" } }\n  In the above example the \"test3\" alias has an action of \"alias\", and\na required \"to\" field.  If this \"to\" field were missing the alias would\nfail to run, and an error would be printed in the logs.  Now aliases of 'user', '@host' and 'user@host' possible:     { \"demo\" : { \"action\" : \"drop\" } }\n  or\n  { \"@example.com\" : { \"action\" : \"drop\" } } \n  or\n  { \"demo@example.com\" : { \"action\" : \"drop\" } } \n  Aliases may also be exploded to multiple recipients:     { \"sales@example.com\": { \"action\": \"alias\", \"to\": [\"alice@example.com\", \"bob@example.com\"] } }\n   wildcard notation  In an effort to match some of the functionality of other alias parsers\nwe've allowed wildcard matching of the alias against the right most\nstring of a RCPT address.  The characters '-' and '+' are commonly used\nfor subaddressing and this plugin has built-in support to alias the\n\"user\" part of the email address.  That is, if our address were   test2-testing@example.com  (or\n  test2+testing@example.com ), the below alias would match:     { \"test2\" : { \"action\" : \"drop\" } }\n  The larger, and more specific alias, should always match first when\nusing wildcard '-' notation.  So if the above RCPT were put up against\nthis alias config, it would not drop, but rather map to another\naddress:     {\n      \"test2\" : { \"action\" : \"drop\" },\n      \"test2-testing\" : { \"action\" : \"alias\", \"to\" : \"test@foo.com\" }\n  }\n  chaining and circuits  In short, we do not allow chaining of aliases at this time.  As a\nside-effect, we enjoy protections against alias circuits.  optional one line formatting  Any valid JSON will due, however, please consider keeping each alias\non its own line so that others that wish to grep the aliases file\nhave an easier time finding the full configuration for an alias.  nondeterministic duplicate matches  This plugin was written with speed in mind.  That means every lookup\nhashes into the alias file for its match.  While the act of doing so\nis fast, it does mean that any duplicate alias entries will match\nnondeterministically.  That is, we cannot predict what will happen\nhere:     {\n      \"coinflip\" : { \"action\" : \"alias\", \"to\" : \"heads@coin.com\" },\n      \"coinflip\" : { \"action\" : \"alias\", \"to\" : \"tails@coin.com\" }\n  }\n  Truth be told, one result will likely always be chosen over the other,\nso this is not exactly a coinflip.  We simply cannot say what the\nlanguage implementation will do here, it could change tomorrow.  action (required)  The following is a list of supported actions, and the options they require.   drop  This action simply drops a message, while pretending everything was\nokay to the sender.  This acts much like an alias to /dev/null in\nother servers.  alias  This action will map the alias key to the address specified in the\n\"to\" option.  A note about matching in addition to the note\nabout wildcard '-' above.  When we match an alias, we store the\nhostname of the match for a shortcut substitution syntax later.   to (required)  This option is the full address, or local part at matched hostname\nthat the RCPT address will be re-written to.  For an example of\nan alias to a full address consider the following:     { \"test5\" : { \"action\" : \"alias\", \"to\" : \"test5@foo.com\" } }\n  This will map RCPT matches for \"test5\" to \"  test5-works@foo.com \".\nThis would map \"  test5@somedomain.com \" to \"  test5-works@foo.com \"\nevery time.  Now compare this notation with its shortcut\ncounterpart, best used when the \"to\" address is at the same\ndomain as the match:     { \"test4\" : { \"action\" : \"alias\", \"to\" : \"test4\" } }\n  Clearly, this notation is more compact, but what does it do.  Well,\nmail to \"  test4-foo@anydomain.com \" will map to \"  test4@anydomain.com \".\nOne can see the clear benefit of using this notation with lots of\naliases on a single domain that map to other local parts at the\nsame domain.  Example Configuration  {\n\"test1\" : { \"action\" : \"drop\" },\n\"test2\" : { \"action\" : \"drop\" },\n\"test3\" : { \"action\" : \"alias\", \"to\" : \"test3-works\" },\n\"test4\" : { \"action\" : \"alias\", \"to\" : \"test4\" },\n\"test5\" : { \"action\" : \"alias\", \"to\" : \"  test5-works@success.com \" },\n\"test6\" : { \"action\" : \"alias\", \"to\" : \"  test6-works@success.com \" }\n}",{"id":233,"path":234,"dir":218,"title":235,"description":236,"keywords":237,"body":243},"content:8.plugins:asn.md","/plugins/asn","asn - get AS number of remote IP address plugin for Haraka","Haraka asn plugin - get AS number of remote",[238,119,229,239,240,241,242],"Faster Lookups","Headers","Theory","Research","Consumers","  asn plugin   Use DNS queries to look up the ASN of the remote IP.  Inserts a result object with the ASN of the remote host.  The AS Number is the   Autonomous System Number \nthat represents the bailiwick or sphere of control of a network operator.  Faster Lookups  If your mail server is very busy:   Download the   routeviews ASN zones  and serve them on a local DNS server. If you use SpamAssassin, this is highly recommended as it looks up ASN using routeviews via DNS.  Use instead the   connect.geoip  plugin with the MaxMind backend. It caches the ASN database locally and gets the ASN without network traffic and delays.  Usage  The AS number can be accessed by plugins that run after   asn  like so:   var asn = connection.results.get('asn');\nif (asn && asn.asn) {\n    connection.loginfo(plugin, \"hey look, it's ASN: \" + asn.asn);\n}\n  Configuration  The following settings can be set in config/asn.ini.   providers: comma separated list of DNS zones that provide IP to ASN lookups   origin.asn.cymru.com  origin.asn.spameatingmonkey.net  asn.routeviews.org  test_ip: (Default:  An IP address that maps to an ASN (any valid public IP should work)   timeout (in seconds): (Default: 4)  How long to wait for DNS results to return.  Headers  Optionally add headers to messages with ASN info.   asn_header (Default: false)  add X-Haraka-ASN header with the ASN and if available, netmask.   provider_header (Default: false)  Add X-Haraka-ASN-  provider  header for each provider that returned results.  Theory  An ASN is a very good approximation of the IP space under the control\nof a network operator. The theory behind ASN tracking is that good network\noperators police their networks, proactively limit abuse, and are less likely\nto be emitting abuse.  Not-so-good network operators are likely to emit a greater number of abusive\nconnections, and should be handled with increased scrutiny.  Research   http://www.cc.gatech.edu/~feamster/papers/snare-usenix09.pdf  \"Performance based on AS number only...The classifier gets a false positive\nrate of 0.76%   and  a 70% detection rate\"  \"AS numbers are more persistently associated with a sender's\nidentity than the IP address, for two reasons: (1) The spamming mail server\nmight be set up within specific ASes without the network administrator\nshutting it down. (2) Bots tend to aggregate within ASes, since the machines\nin the same ASes are likely to have the same vulnerability. It is not easy for\nspammers to move mail servers or the bot armies to a different AS; therefore,\nAS numbers are robust to indicate malicious hosts.\"  See also:   Using BGP data to find spammers  Consumers  The   karma  plugin uses the ASN to maintain\nits network neighborhood reputation.",{"id":245,"path":246,"dir":218,"title":247,"description":248,"keywords":249,"body":252},"content:8.plugins:attachment.md","/plugins/attachment","attachment - Attachment plugin for Haraka","Haraka attachment plugin - attachment handling for Haraka",[250,251,124,229],"Limitations","Requirements","  Attachment plugin  This plugin allows you to reject messages based on Content-Type within\nthe message or any MIME parts or on the filename of any attachments.  Limitations  This plugin cannot detect forged MIME types where the sender is lying\nabout the type.  The type is not confirmed in any way currently.  Requirements  To be able to check filenames inside archive files the npm module\n  tmp  is required and the   bsdtar  binary must be available (in\n/bin /usr/bin or /usr/local/bin).  If either   tmp  or   bsdtar  are unavailable then the plugin will\nautomatically disable expansion of archive files.  Logging  At INFO level logging this plugin will output the filename and type\nof each attached file along with an MD5 checksum of the contents.\nThe MD5 checksum is useful to check against   www.virustotal.com  Configuration   attachment.ini   archive_max_depth\n(default: 5)  The maximum level of nested archives that will be unpacked.\nIf this is exceeded the message will be rejected.  archive_extns\n(default: .zip,.tar,.tgz,.taz,.z,.gz,.rar,.7z)  File extensions that should be treated as archives.\nThis can be any file type supported by bsdtar.  allow_encrypted_archives\n(default: false)  Allow archives that cannot be read by bsdtar because\nthey are encrypted.  timeout\n(default: 30)  Timeout in seconds before the plugin will abort.  attachment.filename.regex  This file contains a list of regular expressions, one per line that\nwill be tested against each filename found within a message.\nThe first regexp to match will cause the message to be rejected.  \nAny invalid regexps will be detected, reported and skipped.  attachment.filename.wc  As above, except this expects wildcards instead of regular expressions.  attachment.archive.filename.regex  This file contains a list of regular expressions, one per line that\nwill be tested against each filename found within an archive file.\nThe first regexp to match will cause the message to be rejected.\nAny invalid regexps will be detected, reported and skipped.  attachment.archive.filename.wc  As above, except this expects wildcards instead of regular expressions.  attachment.ctype.regex  This file contains a list of regular expressions, one per line that\nwill be tested against each MIME Content-Type header in the message.\nThe first regexp to match will cause the message to be rejected.\nAny invalid regexps will be detected, reported and skipped.  attachiment.ctype.wc  As above, except this expects wildcards instead of regular expressions.",{"id":254,"path":255,"dir":256,"title":257,"description":258,"keywords":259,"body":260},"content:8.plugins:auth:auth_bridge.md","/plugins/auth/auth_bridge","auth","auth/auth_bridge - Authenticate users against an external service","Haraka auth/auth_bridge plugin - Authenticate users against an external service",[229],"  auth/auth_bridge plugin  This plugin allows you to authenticate users to remote SMTP servers\nbridging the original user and password to the remote server,\nand proxy the result back to authenticate the client.  This plugin is meant to be used with the plugin   queue/smtp_bridge .  It is different than   auth/auth_proxy  because it doesn't require\nthe AUTH user in   user@domain.com  format, and it doesn't check that\nthe domain is the configuration file. This plugins simply takes\nthe original user and password and tries to authenticate it in the\nremote SMTP server.  Configuration  Configuration is stored in   config/smtp_bridge.ini  and uses the INI\nstyle formatting.  The configuration of this plugin is simple:   host=localhost\n#port=\n#auth_type=\n#priority=10\n   host: the host where you will be authenticating and posting,\nfor example   smtp.host.tld . This is the only setting required.  If needed you can also set   port: default to empty and Haraka will use 25.  The options   auth_type  and   priority  will be used by   queue/smtp_bridge",{"id":262,"path":263,"dir":256,"title":264,"description":265,"keywords":266,"body":267},"content:8.plugins:auth:auth_ldap.md","/plugins/auth/auth_ldap","auth/auth_ldap - Authenticate users against an LDAP server","Haraka auth/auth_ldap plugin - Authenticate users against an LDAP server",[229],"  auth/auth_ldap plugin  The   auth/auth_ldap  plugin uses an LDAP bind to authenticate a user. Currently\nonly one server and multiple DNs can be configured. If any of the DN binds succeed,\nthe user is authenticated.  Configuration  Configuration is stored in   config/auth_ldap.ini  and uses the INI\nstyle formatting.  Only the   LOGIN  authentication method is supported assuming that passwords in the\nLDAP database are not stored in cleartext (which would allow for CRAM-MD5). Note\nthat this means passwords will be sent in the clear to the LDAP server unless\nan   ldaps://  conection is used.  Current configuration options in   [core]  are:   server - the url of the LDAP server (ldap:// or ldaps://)\ntimeout - time in miliseconds to wait for the server resonse before giving up\nrejectUnauthorized - boolean (true or false) as to whether to reject connections\n    not verified against a CA. Meaning, a \"false\" allows non-verified.  \n  Example:   [core]\nserver=ldaps://ldap.opoet.com\ntimeout=5000\nrejectUnauthorized=false  \n  The   [dns]  section (that is plural DN and not domain name system), is a list of DNs to use\nto bind. The   %u  in the strings is substituted with the user name used in the SMTP\nauthentication. Note that the keys have no meaning and the DNs are tried in series until\nthe first successful bind. The LDAP RFC does not allow for parallel binds on a connection,\nso it is suggested that the most commonly used DN be placed earlier in the list.  Example:   [dns]\ndn1=uid=%u,ou=Users,dc=opoet,dc=com\ndn2=uid=%u,ou=people,dc=opoet,dc=com \n",{"id":269,"path":270,"dir":256,"title":271,"description":272,"keywords":273,"body":274},"content:8.plugins:auth:auth_proxy.md","/plugins/auth/auth_proxy","auth/auth_proxy - Authenticate users against an external service","Haraka auth/auth_proxy plugin - Authenticate users against an external service",[229],"  auth/auth_proxy plugin  This plugin allows you to authenticate users by domain to remote SMTP servers\nand proxy the result back to authenticate the client.  For this to work - the AUTH username   must  be in   user@domain.com  format\nregardless as to whether the remote SMTP server requires it in this format.\nThe domain part of the username is used to look-up which SMTP servers should\nbe used to authenticate users for that domain.\nWhen sending the AUTH credentials to the remote server, this plugin will try\nand send the full username e.g.   user@domain.com  first and if this fails it\nwill then strip the @domain.com part and just send the unqualified username.  Due to the way this plugin works - it can only support PLAIN and LOGIN\nauthentication methods and for this reason it requires that STARTTLS be\nused via the tls plugin before it will advertise AUTH capabilities by the\nEHLO command.  When connecting to the remote SMTP systems it will always\nattempt STARTTLS if it is offered, but it does   not  require it, so caution\nshould be exercised.  Configuration  Configuration is stored in   config/auth_proxy.ini  and uses the INI\nstyle formatting.  The configuration of this plugin is simple:   [domains]\ndomain.com = server1.domain.com:587 server2.domain.com\n  Where domain.com is the domain-part of the username equals a list of hosts\nthat should be consulted in host:port format.  The    is optional and will\ndefault to 25.  The list of hosts can be space, semi-colon or comma separated.  If more than host is specified, then subsequent hosts will only be tested if\nthere is some sort of error e.g. timeout, connection or protocol error.",{"id":276,"path":277,"dir":256,"title":278,"description":279,"keywords":280,"body":281},"content:8.plugins:auth:auth_vpopmaild.md","/plugins/auth/auth_vpopmaild","auth/auth_vpopmaild - Authenticate users against vpopmaild","Haraka auth/auth_vpopmaild plugin - Authenticate users against vpopmaild",[229],"  auth/auth_vpopmaild plugin  The   auth/vpopmaild  plugin allows you to authenticate against a vpopmaild\ndaemon.  Configuration  Configuration is stored in   config/auth_vpopmaild.ini  and uses INI\nstyle formatting.  There are three configuration settings:   host: The host/IP that vpopmaild is listening on (default: localhost).  port: The TCP port that vpopmaild is listening on (default: 89).  sysadmin: A colon separated username:password of a vpopmail user with\nSYSADMIN privileges (see vpopmail/bin/vmoduser -S). This is   only \nnecessary to support CRAM-MD5 which requires access to the clear text\npassword. On new installs, it's best not to use CRAM-MD5, as it requires\nstoring clear text passwords. Legacy clients with MUAs configured\nto authenticate with CRAM-MD5 will need this enabled.  Per-domain Configuration  Additionally, domains can each have their own configuration for connecting\nto vpopmaild. The defaults are the same, so only the differences needs to\nbe declared. Example:   [example.com]\nhost=192.168.0.1\nport=999\n\n[example2.com]\nhost=192.168.0.2\nsysadmin=postmaster@example2.com:sekret\n",{"id":283,"path":284,"dir":256,"title":285,"description":286,"keywords":287,"body":288},"content:8.plugins:auth:flat_file.md","/plugins/auth/flat_file","auth/flat_file - Authenticate users against a flat file","Haraka auth/flat_file plugin - Authenticate users against a flat file",[229],"  auth/flat_file plugin  The   auth/flat_file  plugin allows you to create a file containing username\nand password combinations, and have relaying users authenticate from that\nfile.  Note that passwords are stored in clear-text, so this may not be a great idea\nfor large scale systems. However the plugin would be a good start for someone\nlooking to implement authentication using some other form of auth.   Security  - it is recommended to switch to   auth-encfile \nto protect your user credentials.   IMPORANT NOTE  - this plugin requires that STARTTLS be used via the tls plugin\nbefore it will advertise AUTH capabilities by the EHLO command.  This is to\nimprove security out-of-the-box.   Localhost and any IP in RFC1918 ranges\nare automatically exempt from this rule.  Configuration  Configuration is stored in   config/auth_flat_file.ini  and uses the INI\nstyle formatting.  Authentication methods are listed in the   [core]  section under   methods \nparameter. Lists of authentification methods are comma separated. Currently\nsupported methods are:   CRAM-MD5 ,   PLAIN  and   LOGIN . The   PLAIN \nand   LOGIN  methods are not secure. That is why TLS is required before AUTH is\noffered.  Example:   [core]\nmethods=PLAIN,LOGIN,CRAM-MD5\n  Users are stored in the   [users]  section.  Example:   [users]\nuser1=password1\nuser@domain.com=password2\n",{"id":290,"path":291,"dir":218,"title":292,"description":293,"keywords":294,"body":295},"content:8.plugins:avg.md","/plugins/avg","avg - Anti-Virus scanner plugin for Haraka","Haraka avg plugin - Anti-Virus scanner",[229],"  Avg plugin  Implement virus scanning with AVG's legacy TCPD daemon which was available for Linux/FreeBSD.  Messages that AVG detects as infected are rejected. Errors will cause the plugin to return temporary failures unless the defer options are changed (see below).  Configuration  The following options can be set in avg.ini:   port (default: 54322)  TCP port to communicate with the AVG TCPD on.  tmpdir (default: /tmp)  AVG TCPD requires that the message be written to disk and scanned.  This setting configures where any temporary files are written to. After scanning, the temporary files are automatically removed.  connect_timeout (default: 10)  Maximum seconds to wait for the socket to connect. Connections taking longer will cause a temporary failure to be sent to the remote MTA.  session_timeout  Maximum number of seconds to wait for a reply to a command before failing.  A timeout will cause a temporary failure to be sent to the remote MTA.   defer  By default, this plugin defers when errors or timeouts are encountered. To\nfail open (let messages pass when errors are enounctered), set the error\nand/or timeout values to false.   [defer]\nerror=true\ntimeout=true\n",{"id":297,"path":298,"dir":218,"title":299,"description":300,"keywords":301,"body":302},"content:8.plugins:backscatterer.md","/plugins/backscatterer","backscatterer - Backscatterer plugin for Haraka","Haraka backscatterer plugin - Detects and rejects backscatter",[],"  backscatterer plugin  This is a very basic pluign that checks the connecting IP against\nips.backscatterer.org when the envelope-from is null or postmaster@\nas per the instructions at   http://www.backscatterer.org/?target=usage  This plugin is used to reject misdirected bounces and autoresponders\nand sender callouts from abusive systems which can happen when a\nlocal domain is spoofed and used as the envelope-from in a spam run.",{"id":304,"path":305,"dir":218,"title":306,"description":307,"keywords":308,"body":309},"content:8.plugins:block_me.md","/plugins/block_me","block_me - Block Me plugin for Haraka","Haraka block_me plugin - Blocks mail from a specific IP address",[229],"  Block Me plugin  This plugin allows you to configure an address which mail sent to will be\nparsed for a From: address in the body of the message, and will add that\nfrom address to the   mail_from.blocklist  config file.  Effectively this allows your users to forward spams that got through to a\nparticular mailbox to block them in the future.  Note that this is a system-wide block, and not per-user. Be careful with this.  Configuration    config/block_me.recipient  - a file containing the address to email to\nget something blocked. For example:    spam@domain.com .   config/block_me.senders  - a file containing a list of email addresses\nthat are allowed to email the dropbox.",{"id":311,"path":312,"dir":218,"title":313,"description":314,"keywords":315,"body":317},"content:8.plugins:bounce.md","/plugins/bounce","bounce - Bounce plugin for Haraka","Haraka bounce plugin - Bounces mail to a specific address",[229,316],"Features","  Bounce plugin  Provide options for bounce processing.  Configuration  Each feature can be enabled/disabled with a true/false toggle in the   check \nsection of   config/bounce.ini :  Some features can have rejections disabled in the   reject  section.     [check]\n   reject_all  =false\n   single_recipient  =true\n   empty_return_path  =true\n   bad_rcpt  =true\n   bounce_spf  =true\n   non_local_msgid  =true\n   \n   [reject]\n   single_recipient  =true\n   empty_return_path  =true\n   bounce_spf  =false\n   non_local_msgid  =false\n  Features  reject_all  When enabled, blocks all bounce messages using the simple rule of checking\nfor   MAIL FROM:\u003C> .  It is generally a bad idea to block all bounces. This option can be useful\nfor mail servers at domains with frequent spoofing and few or no human users.  single_recipient  Valid bounces have a single recipient. Assure that the message really is a\nbounce by enforcing bounces to be addressed to a single recipient.  This check is skipped for relays or hosts with a private IP, this is because\nMicrosoft Exchange distribution lists will send messages to list members with\na null return-path when the 'Do not send delivery reports' option is enabled\n(yes, really...).  empty_return_path  Valid bounces should have an empty return path. Test for the presence of the\nReturn-Path header in bounces and disallow.  bad_rcpt  Disallow bounces to email addresses listed in   config/bounce_bad_rcpt .  Include email addresses in that file that should   never  receive bounce\nmessages. Examples of email addresses that should be listed are:\nautoresponders,   do-not-reply@example.com ,   dmarc-feedback@example.com , and\nany other email addresses used solely for machine generated messages.  bounce_spf  Parses the message body and any MIME parts for Received: headers and\nstrips out the IP addresses of each Received hop and then checks what\nthe SPF result would have been if bounced message had been sent by that\nhop.  If no 'Pass' result is found, then this test will fail.\nIf SPF returns 'None', 'TempError' or 'PermError' then the test will\nbe skipped.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":319,"path":320,"dir":218,"title":321,"description":322,"keywords":323,"body":326},"content:8.plugins:clamd.md","/plugins/clamd","clamd - ClamAV plugin for Haraka","Haraka clamd plugin - ClamAV anti-virus plugin",[229,324,325],"check","clamd.excludes","  clamd plugin  This plug-in implements Anti-Virus scanning with ClamAV using the   clamd \ndaemon.  The plug-in will reject any message that ClamAV considers to be a virus.\nIf an error occurs (e.g. clamd not running or a timeout), the\nmessage will be deferred with a temporary failure.  Configuration  The following options can be defined in clamd.ini;  clamd_socket (default: localhost:3310)  N.N.N.N:port,   ipv6::literal :port, host:port or /path/to/socket of\nthe clamd daemon.  Multiple hosts can be listed separated by comma, semi-colon or spaces.  If    is omitted it defaults to 3310.  On connection error or timeout the next host in the list will be tried.\nWhen the host list is exhausted, the message will be deferred with\na temporary failure.  randomize_host_order (default: false)  If this is set then the list of hosts with be randomized before a\nconnection is attempted.  only_with_attachments                         (default: false)  Set this option to only scan messages that contain non-textual\nattachments.  This is a performance optimization, however it will\nprevent ClamAV from detecting threats such as Phishing in plain-text\nor HTML messages.  connect_timeout                               (default: 10)  Timeout connection to host after this many seconds.  A timeout will\ncause the next host in the list to be tried.  Once all hosts have\nbeen tried then a temporary failure will be returned.  timeout                                       (default: 30)  Post-connection timeout if there is no activity on the socket after\nthis many seconds.  A timeout will cause the message to be rejected\nwith a tempoary failure.  max_size                                      (default: 26214400)  The maximum size of message that should be sent to clamd in bytes.\nThis option should not be larger than the StreamMaxLength value in\nclamd.conf as clamd will stop scanning once this limit is reached.\nIf the clamd limit is reached the plug-in will log a notice that\nthis has happened and will allow the message though.   reject  An optional reject section can offer control over when to reject connections.\nThe default settings are shown. ClamAV recommends that hits coming from\nSafeBrowsing / Phishing / Heuristics, Potentially Unwanted Applications, and\nUNOFFICIAL be used only for scoring.   * virus=true\n* error=true\n  The following reject options are disabled by default in clamd.conf. With a\ndefault ClamAV install, these will have no effect. When an admin enables in\nclamd.conf, Haraka with then, by default, reject such messages. Adjust these\nsettings to suit.   * Broken.Executable=true\n* Structured=true\n* Encrypted=true\n* PUA=true\n* OLE2=true\n* Safebrowsing=true\n* UNOFFICIAL=true\n  The following options are enabled by default in clamd but ClamAV suggests\nusing them only for scoring.   * Phishing=false\n   check  The optional check section can allow skipping ClamAV check for remote connection\nmeeting following criteria.   authenticated  Default: true  If true, messages from authenticated users will be scanned.  private_ip  Default: true  If true, messages from private IPs will be scanned.  local_ip  Default: true  If true, messages from localhost will be scanned.  relay  Default: true  If true, messages that are to be relayed will be scanned.  clamd.excludes  This file can contain a list of virus name patterns that when matched, are\nnot rejected by this plugin. An X-Haraka-Virus: header will be inserted\ncontaining the virus name. This header can then be used for scoring\nin other plugins.  The format of the file is one pattern per line. Comments are prefixed\nwith #. Matches are case-insensitive.  Patterns are expressed using wildcards (e.g. * and ?) or\nvia regexp by enclosing the pattern in //.  To negate a match (e.g. reject if it matches), prefix the match with !.\nNegative matches are always tested fist.  Example:   # Always reject test signatures\n!*.TestSig_*\n# Skip all unofficial signatures\n*.UNOFFICIAL\n# Phishing\nHeuristics.Phishing.*\n",{"id":328,"path":329,"dir":218,"title":330,"description":331,"keywords":332,"body":334},"content:8.plugins:daemonize.md","/plugins/daemonize","daemonize - Daemonize plugin for Haraka","Haraka daemonize plugin - Daemonize",[229,333],"Init-Script","  daemonize plugin  IMPORTANT NOTE: This plugin should not be used any more and it will\nthrow an error and prevent Haraka from starting.  \nDaemonization is now built into Haraka.  If the 'daemon' module is\ninstalled you simply set daemonize=true in config/smtp.ini now.  To use this plugin you have to install the 'daemon' module by running\n'npm install daemon' in your Haraka configuration directory.  \nIf daemon is not found then the plugin will log a notice and Haraka will\ncontinue running in the foreground.  This plugin should be listed at the top of your config/plugins file so that\nHaraka goes into the background before any other plugins are run.  Configuration  This plugin looks for daemonize.ini in your configuration directory and the\nfollowing options can be set:   log_file  (default: /var/log/haraka.log)  The file that STDOUT should be redirected to.  It is recommended that\nyou use this plugin with the log.syslog plugin instead.  pid_file  (default: /var/run/haraka.pid)  File where the master process PID should be written to.  If this file\ncannot be locked then start-up will fail.  Init-Script  A RedHat/CentOS compatible init-script is provided for use with this module\nwhich can be found in the plugins directory called haraka.init.  \nIt should be copied to /etc/init.d/haraka and registered with\n'chkconfig --add haraka' to activate haraka at system boot.  The init-script presumes that Haraka is installed as /usr/local/bin/haraka\nand main configuration file is /etc/haraka/config/smtp.ini.  \nIf this is not the case on your system, then you should create the file\n/etc/sysconfig/haraka which accepts the following configuration:   exec  (default: exec=/usr/local/bin/haraka)  The path to Haraka script  config  (default: config=/etc/haraka/config/smtp.ini)  The path to the Haraka smtp.ini configuration script  max_open_files  (default: 65535)  The maximum number of open files allowed per process.  If you are\nrunning Haraka using the 'cluster' module, then this is the per-child\nlimit.",{"id":336,"path":337,"dir":218,"title":338,"description":339,"keywords":340,"body":341},"content:8.plugins:data.signatures.md","/plugins/data.signatures","data.signatures - Signatures plugin for Haraka","Haraka data.signatures plugin - Signatures",[229],"  data.signatures plugin  This plugin allows you to add string signatures to a configuration file and\nhave this plugin scan the body text of an email for those strings. Mails\nmatching these signatures will be blocked.  Configuration   data.signatures  This file contains a list of strings (one per line) that will be matched.",{"id":343,"path":344,"dir":218,"title":345,"description":346,"keywords":347,"body":348},"content:8.plugins:dcc.md","/plugins/dcc","dcc - DCC plugin for Haraka","Haraka dcc plugin - DCC",[],"  dcc plugin  NOTE: this plugin is not feature complete.  The Distributed Checksum Clearinghouses or DCC is an anti-spam content filter.\nSee   http://www.dcc-servers.net/dcc/  for details of how it works.  This plugin implements the protocol used by the dccifd daemon to communicate\nwith DCC.  It requires that you install the DCC client and configure and start-up the\ndccifd daemon as per the documentation and expects the dccifd socket to be\n/var/dcc/dccifd.  Currently it only reports results to the logs, it does not reject, greylist\nor do anything with the results of any kind.  You can report spam to DCC during reception by setting:\n  connection.transaction.notes.training_mode = 'spam'",{"id":350,"path":351,"dir":218,"title":352,"description":353,"keywords":354,"body":355},"content:8.plugins:delay_deny.md","/plugins/delay_deny","delay_deny - Connection Delays plugin for Haraka","Haraka delay_deny plugin - Connection Delays",[229],"  delay_deny plugin  Delays all pre-DATA 'deny' results until the recipients are sent\nand all post-DATA commands until all hook_data_post plugins have run.\nThis allows relays and authenticated users to bypass pre-DATA rejections.  Configuration  Configuration options are in config/delay_deny.ini.  This plugin operates in one of two modes: included and excluded.  included plugins  A comma or semicolon separated list of denials that are to be included.\nIn this mode,   only  plugins in the list are bypassed. All other plugins\ncan immediately reject connections.  excluded plugins  A comma or semicolon separated list of denials that are to be excluded.\nExcluded plugins that are not bypassed and can still immediately reject\nconnections.",{"id":357,"path":358,"dir":218,"title":359,"description":360,"keywords":361,"body":368},"content:8.plugins:dkim.md","/plugins/dkim","dkim - DKIM plugin for Haraka","Haraka DKIM plugin",[362,363,364,365,229,366,367],"INSTALL","SIGNING","Key size","Single Domain Configuration","Testing","Notes","  haraka-plugin-dkim  INSTALL     cd   /path/to/local/haraka\n   npm   install   haraka-plugin-dkim\n   echo   \"dkim\"   >>   config/plugins\n   service   haraka   restart\n  Configuration  If the default configuration is not sufficient, copy the config file from the distribution into your haraka config dir and then modify it:     cp   node_modules/haraka-plugin-dkim/config/dkim.ini   config/dkim.ini\n   $EDITOR config/dkim.ini\n  SIGNING  This plugin implements the   DKIM Core specification .  Getting Started  Generate a DKIM selector and keys for your domain:     cd   /path/to/haraka/config/dkim\n   ./dkim_key_gen.sh   example.org\n  Within the config/dkim/${domain} directory will be 4 files:     ls   config/dkim/example.org/\n   dns   private   public   selector\n  The selector file contains the DNS label where the DKIM public key is published. The   private  and   public  files contain the DKIM keys.  The   dns  file contains a formatted record of the public key suitable for copy/pasting into your domains zone file. It also has suggestions for DKIM, SPF, and DMARC policy records.  The DKIM DNS record will look like this:   may2013._domainkey TXT \"v=DKIM1;p=[public key stripped of whitespace];\"\n  The values in the address have the following meaning:   hash: h=[ sha1 | sha256 ]\ntest; t=[ s | s:y ]\ngranularity: g=[ ]\nnotes: n=[ ]\nservices: s=[email]\nkeytypes: [ rsa ]\n  Key size  The default key size created by   dkim_key_gen.sh  is 2048. That is considered secure as of mid-2024.  What to sign  The DKIM signing key for messages from example.org   should  be signed with\na DKIM key for example.org. Failing to do so will result in messages not\nhaving an   aligned  DKIM signature. For DMARC enabled domains, this will\nlikely result in deliverability problems.  For correct alignment, Haraka signs each message with that domains DKIM key.\nFor an alternative, see the legacy Single Domain Configuration below.  Configuration  DKIM signing is configured in the sign section of   dkim.ini .     [sign]\n   enabled   = [ 1 | true | yes ],   default  =false\n   headers   = list, of  ; headers (REQUIRED)\n   \n   ; for single domain configuration\n   selector   = name\n   domain   = name\n   headers: the list of headers that should be signed, separated by commas, colons or semi-colons. Signing prevents tampering with the specified headers. The 'From' header is required by the RFC and will be added if missing.  Single Domain Configuration  To sign all messages with a single DKIM key, you must set the selector and domain in dkim.ini. You must also save your DKIM private key in the file   dkim.private.key  in the Haraka config directory.   selector - Set this to the selector name published in DNS under the _domainkey sub-domain of the domain referenced below.  domain - Set this to the domain name that will be used to sign messages which don't match a per-domain DKIM key. The DNS TXT entry for:  \n._domainkey.\n   Test that your DKIM key is published properly with a DNS request like this:     drill   TXT   $SELECTOR  ._domainkey.  $DOMAIN\n   dig   TXT   $SELECTOR  ._domainkey.  $DOMAIN   +short\n  Example DNS query     export   SELECTOR  =  mar2013\n   export   DOMAIN  =  simerson.net\n   $   dig   TXT   $SELECTOR  ._domainkey.  $DOMAIN   +short\n   \"v=DKIM1;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoyUzGOTSOmakY8BcxXgi0mN/nFegLBPs7aaGQUtjHfa8yUrt9T2j6GSXgdjLuG3R43WjePQv3RHzc+bwwOkdw0XDOXiztn5mhrlaflbVr5PMSTrv64/cpFQKLtgQx8Vgqp7Dh3jw13rLomRTqJFgMrMHdhIibZEa69gtuAfDqoeXo6QDSGk5JuBAeRHEH27FriHulg5ob\"   \"4F4lmh7fMFVsDGkQEF6jaIVYqvRjDyyQed3R3aTJX3fpb3QrtRqvfn/LAf+3kzW58AjsERpsNCSTD2RquxbnyoR/1wdGKb8cUlD/EXvqtvpVnOzHeSeMEqex3kQI8HOGsEehWZlKd+GqwIDAQAB\"\n  DKIM VERIFY  Verify DKIM signatures as defined by RFC 6376 and add an Authentication-Results header as appropriate.  Configuration     [verify]\n   ; allowed_time_skew = (How far can we stretch on time matching, in secs. Useful when clock is skewed.)\n   ; sigerror_log_level =\n  Testing  This plugin provides a command-line test tool that can be used to\ndebug DKIM issues or to check results.   # dkimverify \u003C message\nidentity=\"@gmail.com\" domain=\"gmail.com\" result=pass\n  You can add   --debug  to the option arguments to see a full trace of the processing.  Notes  This plugin and underlying library do not currently support DKIM body length limits (l=).  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":370,"path":371,"dir":218,"title":372,"description":373,"keywords":374,"body":375},"content:8.plugins:dns-list.md","/plugins/dns-list","dns-list - DNS Blacklists plugin for Haraka","Haraka dns lists plugin - DNS Blacklists",[229],"  dns-list plugin  This plugin looks up the connecting IP address in an IP blocklist. Mails\nfound to be in the blocklist are rejected.  Configuration  This plugins uses the following files:  dns-list.ini - INI format with options described below:   zones  A comma or semi-colon list of zones to query.  It will be merged with\nany lists in dnsbl.zones.  periodic_checks  If enabled, this will check all the zones every n minutes.\nThe minimum value that will be accepted here is 5.  Any value less\nthan 5 will cause the checks to be run at start-up only.  The checks confirm that the list is responding and that it is not\nlisting the world.  If any errors are detected, then the zone is\ndisabled and will be re-checked on the next test.  If a zone\nsubsequently starts working correctly then it will be re-enabled.  enable_stats  To use this feature you must have installed the 'redis' module and\nhave a redis server running.  When enabled, this will record several list statistics to redis.  It will track the total number of queries (TOTAL) and the average\nresponse time (AVG_RT) and the return type (e.g. LISTED or ERROR)\nto a redis hash where the key is 'dns-list-stat:zone' and the hash\nfield is the response type.  It will also track the positive response overlap between the lists\nin another redis hash where the key is 'dns-list-overlap:zone' and\nthe hash field is the other list names.  Example: \n     redis 127.0.0.1:6379> hgetall dns-list-stat:zen.spamhaus.org\n  1) \"TOTAL\"\n  2) \"23\"\n  3) \"ENOTFOUND\"\n  4) \"11\"\n  5) \"LISTED\"\n  6) \"12\"\n  7) \"AVG_RT\"\n  8) \"45.5\"\n  redis 127.0.0.1:6379> hgetall dns-list-overlap:zen.spamhaus.org\n  1) \"b.barracudacentral.org\"\n  2) \"1\"\n  3) \"bl.spamcop.net\"\n  4) \"1\"\n  5) \"TOTAL\"\n  6) \"1\"\n    stats_redis_host  In the form of   host:port  this option allows you to specify a different\nhost on which redis runs.  reject (default: true)  Reject connections from IPs that are blacklisted. Setting this to false\nmakes dnsbl informational. reject=false is best used in conjunction with\nplugins like   karma  that employ a scoring\nengine to make choices about message delivery.  search: (default: first)  first: consider first DNSBL response conclusive. End processing.\nall:   process all DNSBL results",{"id":377,"path":378,"dir":218,"title":379,"description":380,"keywords":381,"body":382},"content:8.plugins:dnswl.md","/plugins/dnswl","dnswl - DNSWL plugin for Haraka","Haraka dnswl plugin - DNSWL",[229],"  dnswl plugin  This plugin looks up the connecting IP address in an IP whitelist.\nIf the host is listed, then the plugin will return OK for all hooks\nup to hook_data.  IMPORTANT!  The order of plugins in config/plugins is important when\nthis plugin is used.  It should be listed   before  any plugins that\nyou wish to skip, but after any plugins that accept recipients.  Configuration  This plugins uses the following files:  dnswl.zones - Contains a list of zones to query, one per line.  dnswl.ini - INI format with options described below:   zones  A comma or semi-colon list of zones to query.  It will be merged with\nany lists in dnswl.zones.  periodic_checks  If enabled, this will check all the zones every n minutes.\nThe minimum value that will be accepted here is 5.  Any value less\nthan 5 will cause the checks to be run at start-up only.  The checks confirm that the list is responding and that it is not\nlisting the world.  If any errors are detected, then the zone is\ndisabled and will be re-checked on the next test.  If a zone\nsubsequently starts working correctly then it will be re-enabled.  enable_stats  To use this feature you must have installed the 'redis' module and\nhave a redis server running.  When enabled, this will record several list statistics to redis.  It will track the total number of queries (TOTAL) and the average\nresponse time (AVG_RT) and the return type (e.g. LISTED or ERROR)\nto a redis hash where the key is 'dns-list-stat:zone' and the hash\nfield is the response type.  It will also track the positive response overlap between the lists\nin another redis hash where the key is 'dns-list-overlap:zone' and\nthe hash field is the other list names.  Example: \n     redis 127.0.0.1:6379> hgetall dns-list-stat:zen.spamhaus.org\n  1) \"TOTAL\"\n  2) \"23\"\n  3) \"ENOTFOUND\"\n  4) \"11\"\n  5) \"LISTED\"\n  6) \"12\"\n  7) \"AVG_RT\"\n  8) \"45.5\"\n  redis 127.0.0.1:6379> hgetall dns-list-overlap:zen.spamhaus.org\n  1) \"b.barracudacentral.org\"\n  2) \"1\"\n  3) \"bl.spamcop.net\"\n  4) \"1\"\n  5) \"TOTAL\"\n  6) \"1\"\n    stats_redis_host  In the form of   host:port  this option allows you to specify a different\nhost on which redis runs.",{"id":384,"path":385,"dir":218,"title":386,"description":387,"keywords":388,"body":389},"content:8.plugins:early_talker.md","/plugins/early_talker","early_talker - Connection Delays plugin for Haraka","Haraka early_talker plugin - Connection Delays",[229],"  early_talker plugin  Early talkers are violators of the SMTP specification, which require that\nclients must wait for certain responses before sending the next command.  This plugin introduces a configurable delay before the connection banner\nand after the DATA command for Haraka to detect if it talks early.  If an early talker is detected at connection or DATA, then a DENY is\nreturned with the message 'You talk too soon'.  Configuration  The config file early_talker.ini has two options:   pause: the delay in seconds before each SMTP command. Default is no pause.  reject: whether or not to reject for early talkers. Default is true;   ip_whitelist : list of IP addresses and/or subnets to whitelist",{"id":391,"path":392,"dir":218,"title":393,"description":394,"keywords":395,"body":398},"content:8.plugins:elasticsearch.md","/plugins/elasticsearch","elasticsearch - Logs to Elasticsearch plugin for Haraka","Haraka elasticsearch plugin - Logs to Elasticsearch",[124,396,229,397],"Errors","Index map template","  elasticsearch plugin  Logging  Unless errors are encountered, no logs are emitted.  Errors  The elasticsearch module has very robust error handling built in. If there's a\nconnection issue, errors such as these will be emitted when Haraka starts\nup:   Elasticsearch cluster is down!  No Living connections  However, ES will continue attempting to connect and when the ES server becomes\navailable, logging will begin. If errors are encountered trying to save data\nto ES, they look like this:   No Living connections  Request Timeout after 30000ms  They normally fix themselves when ES resumes working properly.  Configuration   host - an IP or hostname of the ES server to connect to  host=127.0.0.2  pluginObject  By default, all plugin results are presented as   $plugin_name: { ... } , at\nthe top level. If you prefer that all plugin results be nested inside an\nobject   $obj: { $plugin_name: { ...} , set pluginObject to that object's key name   pluginObject=plugin\n    ignore_hosts  A config file section for hosts whose results should not be stored in\nES. HAproxy servers, Nagios, and other hosts who monitor Haraka can be listed\nhere. The format for entries is host.name=true    index  transaction=smtp-transaction\nconnection=smtp-connection  Transactions include all the connection information and are \"the good stuff.\"\nWhen a connection has transactions, the connection is not saved separately.\nThe distinction is that a connection is stored only when it has zero\ntransactions. The connections index tends to be mostly noise (monitoring,\nblocked connections, bruteforce auth attempts, etc.). To collapse them into\nthe same index, set the value for both identically.  Index map template  Creating a map template will apply the template(s) to any future indexes that\nmatch the pattern/name in the template setting. This is how to manually apply\nan index map template:     curl -XPUT localhost:  9200  /_template/haraka_results -d '\n   {\n       \"template\"   :   \"smtp-*\"  ,\n       \"mappings\"   : {\n           \"haraka\"   : {\n               \"dynamic_templates\"   : [\n                   {   \"fail_results\"   : {\n                           \"match\"   :   \"fail\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   },\n                   {   \"pass_results\"   : {\n                           \"match\"   :   \"pass\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   },\n                   {   \"skip_results\"   : {\n                           \"match\"   :   \"skip\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   },\n                   {   \"msg_results\"   : {\n                           \"match\"   :   \"msg\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   },\n                   {   \"err_results\"   : {\n                           \"match\"   :   \"err\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   },\n                   {   \"ip_addrs\"   : {\n                           \"match\"   :   \"ip\"  ,\n                           \"mapping\"   : {   \"type\"   :   \"ip\"   }\n                       }\n                   },\n                   {   \"hostnames\"   : {\n                           \"match\"   :   \"host\"  ,\n                           \"mapping\"   : {\n                               \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"\n                           }\n                       }\n                   }\n               ],\n               \"properties\"   : {\n                   \"plugin\"   : {\n                       \"properties\"   : {\n                           \"asn\"   : {\n                               \"properties\"   : {\n                                   \"org\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"asn_good\"          : {   \"type\"   :   \"double\"   },\n                                   \"asn_bad\"           : {   \"type\"   :   \"double\"   },\n                                   \"asn_score\"         : {   \"type\"   :   \"double\"   },\n                                   \"asn_connections\"   : {   \"type\"   :   \"double\"   }\n                               }\n                           },\n                           \"geoip\"   : {\n                               \"properties\"   : {\n                                   \"org\"        : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"geo\"        : {   \"type\"   :   \"geo_point\"   },\n                                   \"distance\"   : {   \"type\"   :   \"float\"   }\n                               }\n                           },\n                           \"helo\"   : {\n                               \"properties\"     : {\n                                   \"ips\"        : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"fcrdns\"   : {\n                               \"properties\"      : {\n                                   \"fcrdns\"      : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"other_ips\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"ptr_names\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"p0f\"   : {\n                               \"properties\"   : {\n                                   \"os_flavor\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"rspamd\"   : {\n                               \"properties\"     : {\n                                   \"emails\"     : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"urls\"       : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"messages\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"karma\"   : {\n                               \"properties\"   : {\n                                   \"connect\"     : {   \"type\"   :   \"double\"   },\n                                   \"score\"       : {   \"type\"   :   \"double\"   },\n                                   \"good\"        : {   \"type\"   :   \"double\"   },\n                                   \"bad\"         : {   \"type\"   :   \"double\"   },\n                                   \"history\"     : {   \"type\"   :   \"double\"   },\n                                   \"connections\"   : {   \"type\"   :   \"double\"   },\n                                   \"total_connects\"   : {   \"type\"   :   \"double\"   },\n                                   \"neighbors\"   : {   \"type\"   :   \"double\"   }\n                               }\n                           },\n                           \"spamassassin\"   : {\n                               \"properties\"   : {\n                                   \"headers\"  : {\n                                       \"properties\"   : {\n                                           \"report\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                           \"Status\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                                       }\n                                   },\n                                   \"line0\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"reqd\"    : {   \"type\"   :   \"double\"   },\n                                   \"score\"   : {   \"type\"   :   \"double\"   },\n                                   \"tests\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"spf\"   : {\n                               \"properties\"   : {\n                                   \"domain\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           }\n                       }\n                   },\n                   \"message\"   : {\n                       \"properties\"   : {\n                           \"bytes\"   : {   \"type\"  :   \"double\"   },\n                           \"envelope\"  : {\n                               \"properties\"  : {\n                                   \"sender\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"recipient\"   : {\n                                       \"properties\"    : {\n                                           \"action\"    : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                           \"address\"   : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                                       }\n                                   }\n                               }\n                           },\n                           \"header\"  : {\n                               \"properties\"  : {\n                                   \"from\"           : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"to\"             : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"subject\"        : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"message-id\"     : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"date\"           : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"reply-to\"       : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"resent-from\"    : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"resent-header\"  : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   },\n                                   \"sender\"         : {   \"type\"   :   \"string\"  ,   \"index\"   :   \"not_analyzed\"   }\n                               }\n                           },\n                           \"body\"   : {\n                               \"properties\"   : {\n                                   \"attachment\"   : {\n                                       \"properties\"  : {\n                                           \"bytes\"   : {   \"type\"   :   \"float\"   },\n                                           \"ctype\"   : {   \"type\"   :   \"string\"   },\n                                           \"file\"    : {   \"type\"   :   \"string\"   },\n                                           \"md5\"     : {   \"type\"   :   \"string\"  ,   \"index\"  :   \"not_analyzed\"   }\n                                       }\n                                   }\n                               }\n                           },\n                           \"queue\"   : {\n                               \"properties\"   : {\n   \n                               }\n                           }\n                       }\n                   },\n                   \"connection\"   : {\n                       \"properties\"   : {\n                           \"count\"   : {\n                               \"properties\"   : {\n                                   \"msg\"   : {\n                                       \"properties\"   : {\n                                           \"accept\"   : {   \"type\"  :   \"integer\"   },\n                                           \"reject\"   : {   \"type\"  :   \"integer\"   },\n                                           \"tempfail\"   : {   \"type\"  :   \"integer\"   }\n                                       }\n                                   },\n                                   \"rcpt\"   : {\n                                       \"properties\"   : {\n                                           \"accept\"   : {   \"type\"  :   \"integer\"   },\n                                           \"reject\"   : {   \"type\"  :   \"integer\"   },\n                                           \"tempfail\"   : {   \"type\"  :   \"integer\"   }\n                                       }\n                                   },\n                                   \"errors\"   : {   \"type\"  :   \"integer\"   },\n                                   \"trans\"   : {   \"type\"  :   \"integer\"   }\n                               }\n                           },\n                           \"early\"   : {   \"type\"   :   \"boolean\"   }\n                       }\n                   }\n               }\n           }\n       }\n   }'\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":400,"path":401,"dir":218,"title":402,"description":403,"keywords":404,"body":405},"content:8.plugins:esets.md","/plugins/esets","esets - ESET Antivirus plugin for Haraka","Haraka esets plugin - ESET Antivirus Plugin",[],"  esets plugin  This plugin allows virus scanning with ESET Mail Security for Linux/BSD.  Install the software as per the intructions from ESET and enable this plugin\nand it will scan each message using the \"esets_cli\" command which defaults to\n/opt/eset/esets/bin/esets_cli.",{"id":407,"path":408,"dir":218,"title":409,"description":410,"keywords":411,"body":418},"content:8.plugins:fcrdns.md","/plugins/fcrdns","fcrdns - Forward Confirmed Reverse DNS plugin for Haraka","Haraka fcrdns plugin - Forward Confirmed Reverse DNS",[412,413,414,415,416,417],"DESCRIPTION","USAGE","CONFIGURATION","ANTI-SPAM EFFECTS","HOW IT WORKS","iprev","  fcrdns plugin  DESCRIPTION  Determine if the SMTP sender has matching forward and reverse DNS.  See   FCrDNS at wikipedia  USAGE  Other plugins can use FCrDNS results like this:   var fcrdns = connection.results.get('fcrdns');\nif (fcrdns) {\n    if (fcrdns.fcrdns) {\n        // they passed, reward them\n    }\n\n    var fails = fcrdns.fail;\n    if (connection.results.has('fcrdns', 'fail', /^is_generic/) {\n        // their IP is in their hostname, unlikely to be MX, penalize\n    }\n}\n  CONFIGURATION  Edit config/fcrdns.ini  This plugin honors the whitelisting of IPs as set by the rdns_access plugin.\nFor that to work, rdns_access needs to be listed   before  this plugin in\nconfig/plugins.   timeout=30  When performing DNS lookups, time out after this many seconds.  The following settings permit control of which test will block connections. To\nmimic the lookup_rdns.strict plugin, set no_rdns=true.   [reject]\n; reject if the IP address has no PTR record\nno_rdns=false\n\n; reject if the FCrDNS test fails\nno_fcrdns=false\n\n; reject if the PTR points to a hostname without a valid TLD\ninvalid_tld=false\n\n; reject if the rDNS is generic, examples:\n; 1.2.3.4.in.addr.arpa\n; c-67-171-0-90.hsd1.wa.comcast.net\ngeneric_rdns=false\n  ANTI-SPAM EFFECTS  The reverse DNS of zombie PCs in bot nets is out of the bot operators control.\nThis presents a significant hurdle for a large portion of the hosts that\nattempt spam delivery.  HOW IT WORKS  From Wikipedia:   Forward Confirmed Reverse DNS   First a reverse DNS lookup (PTR query) is performed on the IP address,\nwhich returns a list of zero or more PTR records.  For each domain name returned in the PTR query results, a regular\n'forward' DNS lookup (type A or AAAA query) is then performed.  Any A or AAAA records returned by the second query are then compared\nagainst the original IP address. If there is a match, FCrDNS passes.  iprev  The iprev results are added to the Authentication-Results header.   RFC 1912  RFC 5451  RFC 7001  2.6.3.  \"iprev\" Results  pass:  The DNS evaluation succeeded, i.e., the \"reverse\" and\n\"forward\" lookup results were returned and were in agreement.  fail:  The DNS evaluation failed.  In particular, the \"reverse\" and\n\"forward\" lookups each produced results, but they were not in\nagreement, or the \"forward\" query completed but produced no\nresult, e.g., a DNS RCODE of 3, commonly known as NXDOMAIN, or an\nRCODE of 0 (NOERROR) in a reply containing no answers, was\nreturned.  temperror:  The DNS evaluation could not be completed due to some\nerror that is likely transient in nature, such as a temporary DNS\nerror, e.g., a DNS RCODE of 2, commonly known as SERVFAIL, or\nother error condition resulted.  A later attempt may produce a\nfinal result.  permerror:  The DNS evaluation could not be completed because no PTR\ndata are published for the connecting IP address, e.g., a DNS\nRCODE of 3, commonly known as NXDOMAIN, or an RCODE of 0 (NOERROR)\nin a reply containing no answers, was returned.  This prevented\ncompletion of the evaluation.  A later attempt is unlikely to\nproduce a final result.",{"id":420,"path":421,"dir":218,"title":422,"description":423,"keywords":424,"body":425},"content:8.plugins:geoip.md","/plugins/geoip","geoip - GeoIP lookup","Haraka geoip plugin - GeoIP lookup",[],"  geoip plugin  provide geographic information about mail senders.  SYNOPSIS  Use MaxMind's GeoIP databases to report geographic information about senders. This plugin has support for both the   maxmind  and   geoip-lite  node modules.  INSTALL  Install the npm geoip module you prefer:   npm install maxmind\n  or\nnpm install -g geoip-lite\n  If both are installed, maxmind will be preferred as it's faster and also provides ASN data. The maxmind module requires manual download of the GeoIP databases. The npm module   maxmind-geolite-mirror  will download the files and keep them up-to-date if you run it periodically.     mkdir   -p   /usr/local/share/GeoIP\n   npm   install   -g   maxmind-geolite-mirror\n   /usr/local/bin/maxmind-geolite-mirror\n  DESCRIPTION  GeoIP results are stored in connection.notes.geoip and connection.  results  .connect.geoip. The following information is typically available:   continent: NA,\ncountry:   US,\n  If the GeoIP city database is available, the following may also be available:   region:   CA,\ncity:     San Francisco,\nll:       [37.7484, -122.4156],\ndistance: 1539    // in kilometers\nrange:    [ 3479299040, 3479299071 ],\n   connect.geoip  also adds entries like this to your logs:   [connect.geoip] US\n[connect.geoip] US, WA\n[connect.geoip] US, WA, Seattle\n[connect.geoip] US, WA, Seattle, 1319km\n  Calculating the distance requires the public IP of this mail server. This may\nbe the IP that Haraka is bound to. If not, make sure that   utils.get_public_ip \ncan figure it out (via STUN or in   smtp.ini ).  CONFIG   distance  Perform the geodesic distance calculations. Calculates the distance \"as the\ncrow flies\" from the remote mail server.  This calculation requires a 'from' IP address. This will typically be the\npublic IP of your mail server. If Haraka is bound to a private IP, net_utils\nwill attempt to determine your public IP. If that doesn't work, edit\nconfig/smtp.ini and set   public_ip .   show_city  show city data in logs and headers. City data is less accurate than country.   show_region in logs and headers. Regional data are US states, Canadian\nprovinces and such.  Set a connection result to true if the distance exceeds this many kilometers.   too_far=4000   asn report_as  Permits reporting the ASN as another plugin (such as connect.asn).  SPAM PREDICTION WITH DISTANCE   Spatio-temporal Network-level Automatic Reputation Engine   \"For ham, 90% of the messages travel about 4,000 km or less. On the\nother hand, for spam, only 28% of messages stay within this range.\"\n  Observations in 2014 suggest that geodesic distance continues to be an\nexcellent predictor of spam.  LIMITATIONS  The distance calculations are more concerned with being fast than\naccurate. The MaxMind location data is collected from whois and is of\nlimited accuracy. MaxMind offers more accurate data for a fee.  For distance calculations, the earth is considered a perfect sphere. In\nreality, it is not. Accuracy should be within 1%.  This plugin does not update the GeoIP databases. You may want to.  SEE ALSO  MaxMind:   http://www.maxmind.com/  Databases:   https://dev.maxmind.com/geoip/geolite2-free-geolocation-data  TODO  Keep an eye on node-geoip and see if they add ASN support. This would be an\nalternative to connect.asn which uses a DNS lookup to retrieve the ASN.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":427,"path":428,"dir":218,"title":429,"description":430,"keywords":431,"body":432},"content:8.plugins:graph.md","/plugins/graph","graph - Graphs plugin for Haraka","Haraka graph plugin - Graphs",[229],"  graph plugin  This plugin logs accepted and rejected emails into a database and provides\na web server which you can browse to and view graphs over time of the\nplugins which rejected connections.  In order for this to work you need to install the   sqlite3  module via\n  npm install sqlite3  in your Haraka directory.  Configuration  config settings are stored in config/graph.ini   db_file  The file name (or :memory:), where data is stored  http_addr  The IP address to listen on for http. Default:   127.0.0.1 .  http_port  The port to listen on for http. Default:   8080 .  ignore_re  Regular expression to match plugins to ignore for logging.\nDefault:   queue|graph|relay",{"id":434,"path":435,"dir":218,"title":436,"description":437,"keywords":438,"body":440},"content:8.plugins:greylist.md","/plugins/greylist","Greylist - Greylisting plugin for Haraka","Haraka greylist plugin - Delays delivery of mail from new senders",[439],"Principles of work","  greylist plugin  Basic greylisting plugin that follows common practices found on internets.  Principles of work  Notation  The so-called   tuple  consists of the following:   First subdomain of rDNS is stripped off (but no shorter than the domain boundary). This is considered a   hostid .  Envelope sender is the   sender .  RCPT TO would supply the   recipient .   hostid  in above notation is chosen unless:   The connecting host has no PTR record, a.k.a. reverse DNS (rDNS).   gl  The rDNS record contains the first two or last two octets of the IP address.   fcrdns  The rDNS record contains the ‘short’, decimal, or hex representation of the full IP address.   fcrdns    gl  Multiple rDNS records are returned.   gl  The rDNS record cannot be verified by forward confirmation (e.g. FCrDNS).   fcrdns  The top-level-domain (TLD) used is not valid.   gl  In other cases, it's set to be the remote party's IP address.  We define the following time periods:    black :  between first connect and start of   gray . Defer.   gray :   between   black  and start of   white . Allow. Host must re-try within this window.   white :  comes after   gray . Allow up until the end of period, then let the record expire in case no connections were made.  Algorithm  The greylist algo is as following:   Party connects. All FcrDNS & DNSWL checks are run by earlier plugins.  Party sends   recipient   If not already whitelisted\n   Check   tuple  color (compare current TS against record creation TS)\n    black ?\n   Create if no record exists. Defer.   gray ?\n   Allow. Promote record to   white  status.   white ?\n   Allow. Update record TS.  In special case,   data  hook runs above algo for all recipients. If any matched, all inherit the action.  DB schema  We store in Redis.  Key format for greylisting entries:   grey:${hostid}:${sender}:${recipient} - grey record  white:${hostid} - white record  For   white :   { first_connect: TS, whitelisted: TS, updated: TS, lifetime: TTL, tried: Integer, tried_when_greylisted: Integer }\n  Where\n  first_connect : TS of first connection (sender)\n  whitelisted : basically the TS of this entry creation\n  updated : last update TS\n  lifetime : seconds for this entry to exist (== TTL)\n  tried : number of checks against this entry\n  tried_when_greylisted : number of checks while the host was +grey+ (sender).  For   grey :   { created: TS, updated: TS, lifetime: TTL, tried: Integer }\n  Where\n  created : TS of first connection (copied to   first_connect  of   white  after promotion)\n  updated : last update TS\n  lifetime : seconds for this entry to exist (== TTL)\n  tried : number of checks against this entry (copied to   tried_when_greylisted  of   white  after promotion)  Whitelisting  It's possible to whitelist hosts using the following section in greylist.ini config file:   ip_whitelist               IP or subnet (prefix notation)  envelope_whitelist         MAIL FROM (email or domain)  recipient_whitelist        RCPT TO  (email or domain)  List of known dynamic hosts, to use the IP instead of the domain:   special_dynamic_domains    Domain",{"id":442,"path":443,"dir":218,"title":444,"description":445,"keywords":446,"body":447},"content:8.plugins:headers.md","/plugins/headers","data.headers - Header Checks plugin for Haraka","Haraka data.headers plugin - Header Checks",[],"  data.headers plugin  Deprecated by   haraka-plugin-headers",{"id":449,"path":450,"dir":218,"title":451,"description":452,"keywords":453,"body":454},"content:8.plugins:helo.checks.md","/plugins/helo.checks","helo.checks - HELO Checks plugin for Haraka","Haraka helo.checks plugin - Rejects messages with invalid HELO/EHLO",[119,229],"  helo.checks plugin  This plugin performs a number of checks on the HELO string.  HELO strings are very often forged or dubious in spam and so this can be a\nhighly effective and false-positive free anti-spam measure.  Usage  helo.checks results can be accessed by subsequent plugins:     var   h   =   connection.results.  get  (  'helo.checks'  );\n   if   (h.pass   &&   h.pass.  length   >   5  ) {\n       // nice job, you passed 6+ tests\n   }\n   if   (h.fail   &&   h.fail.  length   >   3  ) {\n       // yikes, you failed 4+ tests!\n   }\n   if   (connection.results.  has  (  'helo.checks'  ,  'pass'  ,   /  ^  forward_dns  /  ) {\n       // the HELO hostname is valid\n   }\n  Configuration   helo.checks.regexps  List of regular expressions to match against the HELO string. The regular\nexpressions are automatically wrapped in   ^  and   $  so they always match\nthe entire string.  helo.checks.ini  INI file which controls enabling of certain checks:   dns_timeout=30  How many seconds to wait for DNS queries to timeout.   check   * valid\\_hostname=true\n\n  Checks that the HELO has at least one '.' in it and the organizational\n  name is possible (ie, a host within a Public Suffix).\n\n* bare\\_ip=true\n\n  Checks for HELO \u003CIP> where the IP is not surrounded by square brackets.\n  This is an RFC violation so should always be enabled.\n\n* dynamic=true\n\n  Checks to see if all or part the connecting IP address appears within\n  the HELO argument to indicate that the client has a dynamic IP address.\n\n* literal\\_mismatch=1|2|3\n\n  Checks to see if the IP literal used matches the connecting IP address.\n  If set to 1, the full IP must match.  If set to 2, the /24 must match.\n  If set to 3, the /24 may match, or the IP can be private (RFC 1918).\n\n* match\\_re=true\n\n  See above. This is merely an on/off toggle.\n\n* big\\_company=true\n\n  See below. This is merely an on/off toggle.\n\n* forward\\_dns=true\n\n  Perform a DNS lookup of the HELO hostname and validate that the IP of\n  the remote is included in the IP(s) of the HELO hostname.\n\n  This test requires that the valid\\_hostname check is also enabled.\n\n* rdns\\_match=true\n\n  Sees if the HELO hostname (or at least the domain) match the rDNS\n  hostname(s).\n\n* host\\_mismatch=true\n\n  If HELO is called multiple times, checks if the hostname differs between\n  EHLO invocations.\n\n* proto\\_mismatch=true\n\n  If EHLO was sent and the host later tries to then send HELO or vice-versa.\n   reject   For all of the checks included above, a matching key in the reject section\ncontrols whether messages that fail the test are rejected.\n\nDefaults shown:\n\n[reject]\nhost_mismatch=false\nliteral_mismatch=false\nproto_mismatch=false\nrdns_match=false\ndynamic=false\nbare_ip=false\nvalid_hostname=false\nforward_dns=false\nbig_company=false\n   skip   * private\\_ip=true\n\n  Bypasses checks for clients within RFC1918, Loopback or APIPA IP address ranges.\n\n* relaying\n\n  Bypass checks for clients who have relaying privileges (whitelisted IP,\n  SMTP-AUTH, etc).\n   bigco     A list of \u003Chelo>=\u003Crdns>[,\u003Crdns>...] to match against. If the HELO matches\n  what's on the left hand side, the reverse-DNS must match one of the\n  entries on the right hand side or the mail is blocked.\n\n  Example:\n\n        yahoo.com=yahoo.com,yahoo.co.jp\n        aol.com=aol.com\n        gmail.com=google.com\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":456,"path":457,"dir":218,"title":458,"description":459,"keywords":460,"body":467},"content:8.plugins:karma.md","/plugins/karma","karma - a scoring engine plugin for Haraka","Haraka karma plugin - a scoring engine for Haraka",[461,462,463,464,465,466],"Description","How Karma Works","AWARDS","Penalties","Included Tests","LIMITATIONS","  karma plugin  Karma is a heuristic scoring engine that uses connection metadata and other Haraka plugins as inputs. Connections scoring in excess of specified thresholds are rewarded or   penalized  in proportionate ways.  Description  Haraka includes some excellent plugins that detect message or sender patterns that are indicative of spam.   Some    plugins    have    accuracy  rates above 95%. Detecting messages incorrectly 5% of the time means that some portion of ham will get blocked and some portion of spam will get delivered. The traditional solution is to permit users to specify their filtering aggressiveness, and then suffer the consequences (blocked ham -vs- too much spam).  By scoring and weighting several \"95+\" plugins, accuracy rates above 99% are attainable. With a half dozen such plugins,   99.99% accuracy  is attainable. With karma, good senders with good history can occasionally fail tests (false positives) and still deliver their mail. Senders with poor history will have a much harder time.  Karma Prereqs  One challenge for mail filtering is that filters (or plugins, in Haraka's case) are usually called in sequence. A message passes from one filter to the next in a pipeline and each filter gets to choose \"yeah or nay.\" In order for karma to transcend this limit, karma requires that   every  filter passes every message. Nearly all Haraka plugins have a   reject  or   deny  option for this reason.  In order to score a filters results, filters must save their results to the   Result Store . Karma will see that and apply the award specified in   karma.ini .  How Karma Works  Karma takes a holistic view of   connections . During the connection, karma collects these results and applies the   result_awards  defined in   karma.ini . Once a connection/message exceeds the threshold.negative score (default: -8), karma rejects it at the next   deny hook.  The scoring mechanism is not dissimilar to   SpamAssassin , but Karma has some particular advantages:   * Runs entirely in Node, so it's very fast\n* Async and very scalable.\n* Builds sender and network reputation databases\n* Has access to connection properties (relaying, port, auth attempts, etc..)\n* Access to raw SMTP commands (data + formatting inspection)\n* Can reject connections before DATA (save lots of bandwidth)\n  Karma is not a replacement for content filters. Karma focuses on the quality of the   connection . Content filters (bayes*) focus on the content of the   message . Karma works best   with  content filters.  CONFIG  See config/karma.ini for options and inline documentation.  AWARDS  Karma allows the site administrator to control how much weight to assign to\nplugin results, providing a great deal of control over what results are\nworth rejecting for.  Karma begins scoring the connection when the first packet arrives. The IP reputation,   sender OS ,   GeoIP location ,   DNSBL  listing, and   FCrDNS  are often a sufficient basis for rejecting a connection without ever blocking a ham.  Karma performs checks early and often, maximizing the penality it can exact upon bad mailers.  Penalties  Deny / Reject  When connections become worse than   thresholds negative, they are denied during the next   deny hook.  History  Karma history is computed as the number of good - bad connections.  When each connection ends,   karma  records the result. When a sufficient history has been built for an IP or ASN, future connections from that address(es) will get a positive or negative karma award.  The reward is purposefully small, to permit good senders in bad neighborhoods to still send.  Connection Delays  Connection delays (aka tarpitting, teergrubing, early talker) slow down a SMTP conversation by inserting artificial delays. Karma increases connection delays adaptively as connection quality changes.  Karma's delay goals:   1. Don't delay valid senders\n2. Penalize senders in proportion to their karma score\n3. Dampen bruteforce AUTH attacks.\n4. Since the only *cost* we can exact from miscreants is time, and connections are cheap to maintain, keep miscreants online as long as possible.\n  There are three tarpit options:   [tarpit]\n* delay=0   (seconds to delay,      default: 0)\n* max=5     (max seconds to delay,  default: 5)\n  When set to zero, the value of the delay is adaptive, calculated proportional\nto the karma score of the connection. Connections with good karma will see no\ndelay and bad ones will see long delays.  When delay is non-zero, each SMTP response will be delayed by that many seconds.  In practice, most naughty senders abandon the connection when forced to\nwait more than a handful of seconds.   max  sets the maximum delay between\nresponses.  When using   karma , do not use Haraka's   tarpit  plugin.  Included Tests  Connection data that karma considers:    IP Reputation   ASN reputation  DENY events by other plugins  envelope sender from a spammy TLD   malformed envelope addresses   unrecognized SMTP commands  matching   env from  and   env to  name (rare in ham, frequent in spam)  The data from these tests are helpful but the real power of karma is   scoring\nthe results  of other plugins. See karma.ini for a rich set of examples.   IP Reputation  Karma records the number of good, bad, and total connections.  The results\nare accessible to other plugins as well.   var karma = connection.results.get('karma');\n  The karma result object contains at least the following:   score: 0,         \u003C- score for this connection\nhistory: 0,       \u003C- score for all connections\n   good: 0,       \u003C- qty of past 'good' connections\n   bad: 0,        \u003C- qty of past 'bad' connections\nconnections: 0,   \u003C- total past connections\npass: [],         \u003C- tests that added positive karma\nfail: [],         \u003C- tests that added negative karma\n  If an IP has at least 5 connections and all are good or bad, and   all_good  or\n  all_bad  result will be added to the   pass  or   fail  test list. This are\nvery good indicators of future connection quality and are scored in karma.ini.   ASN / Network Neighborhood Reputation   [asn]\nenable=true    (default: true)\nreport_as\n  When   asn enable is true, karma records the number of good and bad\nconnections from each ASN.  ASNs with less than 5 karma points in either direction are ignored.  report_as  Store the ASN results as another plugin. Example: I set   report_as=asn , so that karma history for an ASN is reported with the ASN plugin data. A practical consequence of changing report_as is that the award location in karma.ini would need to change from:   NNN karma | pass | equals | asn_all_good |  2\nNNN karma | fail | equals | asn_all_bad  | -3\n  to:   NNN asn | pass | equals | asn_all_good |  2\nNNN asn | fail | equals | asn_all_bad  | -3\n   Malformed Envelope Addresses  Very old versions of Outlook Express and some malware senders don't bother complying with the RFC (5321, 2821, 821) address format. Karma checks the envelope from and to addresses for a common RFC ignorant pattern that is highly correlated with malware.   Unrecognized SMTP verbs/commands  Certain bruteforce password hacking tools have a pre-programmed SMTP path\nthat ignores SMTP responses. After EHLO, they attempt AUTH,LOGIN with a valid\nusername. To bruteforce a password often requires millions of attempts so each\nbot sprays a couple dozen connections at the target server. Better quality\nMTAs like Haraka have built-in auth protection that inserts timeouts\nbetween successive auth attempts. The bots work around that by dropping the\nconnection after each failure and reconnecting. The attempts are distributed\nso IP blocking is of limited effectiveness.  To combat these bruteforce attacks several strategies are called for:   1. Impose [connection delays](#delay)\n2. Disable SMTP-AUTH when not encrypted. The bots rarely use STARTTLS.\n   Besides preventing user passwords from transiting the internet in clear\n   text, requiring TLS encryption also means AUTH is not available to\n   poorly written bots.\n3. Having done #2, bot AUTH attempts show up as unrecognized commands.\n   Penalizing these with tarpitting and rate limiting will almost never\n   harm a legit sender but it will make it take much much longer for\n   attackers to bruteforce passwords.\n  LIMITATIONS  Karma is most effective at filtering mail delivered by bots and rogue servers.\nSpam delivered by servers with good reputations normally pass karma's checks.\nExpect to use karma   with  content filters.",{"id":469,"path":470,"dir":218,"title":471,"description":472,"keywords":473,"body":480},"content:8.plugins:limit.md","/plugins/limit","limit - Limits plugin for Haraka","Haraka limit plugin - Limits the number of messages per connection",[474,475,476,477,478,479],"concurrency","recipients","unrecognized_commands","errors","Too high counters","Too low counters","  limit plugin  Apply several types of limits to SMTP connections.  Each limit type has a max value that can be defined in limit.ini. The default is empty / disabled until a value has been set.  concurrency  When   [concurrency]max  is defined, it limits the maximum number of simultaneous connections per IP address. Connection attempts in excess of the limit are delayed for   disconnect_delay  seconds (default: 3) before being disconnected.  This works best in conjunction with a history / reputation database, so that\none can assign very low concurrency (1) to bad or unknown senders and higher\nlimits for reputable mail servers.  History  History: when enabled, the   history  setting is the name of a plugin that stores IP history / reputation results. The result store must have a positive value for good connections and negative integers for poor / undesirable connections. Karma is one such plugin.  recipients  When   [recipients]max  is defined, each connection is limited to that number of recipients. The limit is imposed against   all  recipient attempts. Attempts in excess of the limit are issued a temporary failure.  unrecognized_commands  When   [unrecognized_commands]max  is set, a connection that exceeeds the limit is disconnected.  Unrecognized commands are normally SMTP verbs invalidly issued by the client.\nExamples:   issuing AUTH when we didn't advertise AUTH extension  issuing STARTTLS when we didn't advertise STARTTLS  invalid SMTP verbs  Limitations  The unrecognized_command hook is used by the   tls  and   auth  plugins, so\nrunning this plugin before those would result in valid operations getting\ncounted against that connections limits. The solution is simple: list\n  limit  in config/plugins after those.  errors  When   [errors]max  is set, a connection that exceeeds the limit is disconnected. Errors that count against this limit include:   issuing commands out of turn (MAIL before EHLO, RCPT before MAIL, etc)  attempting MAIL on port 465/587 without AUTH  MAIL or RCPT addresses that fail to parse  Error Handling  Too high counters  If the NoSQL store is Redis and Haraka is restarted or crashes while active\nconnections are open, the concurrency counters might be inflated. This is\nhandled by the   concurrency reset setting (default: 10m), which:   ssc: sets collection expiration time  redis: empties the concurrency hash  RAM: empties the in-memory hash of all keys  Too low counters  Because the redis and RAM objects are emptied periodically, connections that\nare open while the collections are emptied will be too low. When\nthat happens, log messages like these might be emitted:   resetting 0 to 1\nresetting -1 to 1\n  This is a harmless error condition that is repaired automatically.",{"id":482,"path":483,"dir":218,"title":484,"description":485,"keywords":486,"body":487},"content:8.plugins:mail_from.is_resolvable.md","/plugins/mail_from.is_resolvable","mail_from.is_resolvable - Rejects messages with unresolvable mail_from domains","Haraka mail_from.is_resolvable plugin - Rejects messages with unresolvable mail_from domains",[229],"  mail_from.is_resolvable plugin  This plugin checks that the domain used in MAIL FROM is resolvable to an MX\nrecord.  Configuration  This plugin uses the INI-style file format and accepts the following options:   timeout  Default: 30  Maximum limit in seconds for queries to complete.  If the timeout is\nreached a TEMPFAIL is returned to the client.  allow_mx_ip=  0|1  Allow MX records that return IP addresses instead of hostnames.\nThis is not allowed as per the RFC, but some MTAs allow it.  reject_no_mx=  0|1  Return DENY and reject the command if no MX record is found.  Otherwise a\nDENYSOFT (TEMPFAIL) is returned and the client will retry later.  DNS errors always return DENYSOFT, so this should be safe to enable.",{"id":489,"path":490,"dir":218,"title":491,"description":492,"keywords":493,"body":496},"content:8.plugins:messagesniffer.md","/plugins/messagesniffer","messagesniffer - Message Sniffer plugin for Haraka","Haraka messagesniffer plugin - Message Sniffer",[494,229,495],"Installation","Actions","  messagesniffer plugin  This plugin provides integration with the commerical Anti-Spam product   MessageSniffer  by Arm Research Labs using its XML Client interface XCI over TCP.  Installation  Install the SNF Client/Server package for your platform as per the instructions on the MessageSniffer website.  Modify your SNFServer.xml file and under the 'xheaders' section set:   output mode='api'  This prevents MessageSniffer from adding additional headers to the temporary file used to send it the message data which is\nunnecessary as Haraka reads the headers from the XCI response.   rulebase on-off='on'  result on-off='on'  black on-off='on'  while on-off='on'  clean on-off='on'  all symbol on-off='on'  These cause SNFServer to send Haraka additional headers that are inserted into all messages scanned by MessageSniffer and\nwill aid debugging and troubleshooting.  Once this is done start/restart the SNF server.  Configuration  This plugin uses   messagesniffer.ini  for configuration.  The   [main]  section is for global configuration, the   [gbudb] \nsection is used to specify the action that should be taken based on the GBUdb result which is checked at the start of the\nconnection and the   [message]  section is used to specify the action to be taken based on the main scan result.   [main]   port  Default: 9001\nTCP port to use when communicating to the SNFServer daemon.\nThis needs to match the   \u003Cxci on-off='on' port='9001'/>  value in the SNFServer.xml file.  tmpdir  Default: /tmp\nTemporary directory used to write temporary message files to that are read by the SNFServer daemon.\nThis directory and the files within need to be readable by the user that SNFServer is running as.  gbudb_report_deny =    true | false | 0 | 1  Default: false\nThis is an experimental option that will record a GBUdb 'bad' encounter for a connected IP address when a client\ndisconnects with no message having been sent or seen by MessageSniffer but Haraka has recorded a hard rejection at\nsome point during the session.  The idea behind this option is that it allows other Haraka plugins rejections influence\nGBUdb IP reputation where MessageSniffer isn't seeing the actual message because it is being rejected pre-DATA.  tag_string  Default:   SPAM \nString to prepend to the Subject line if the 'tag' action is applied.   [gbudb]   white =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: accept\nAction to take when GBUdb reports a 'white' result.  caution =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: continue\nAction to take when GBUdb reports a 'caution' result.  black =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: continue\nAction to take when GBUdb reports a 'black' result.  truncate =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: reject\nAction to take when GBUdb reports a 'truncate' result.   [message]   white =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: continue\nAction to take when MessageSniffer reports a 'white' result (result code: 0).  local_white =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: accept\nAction to take when MessageSniffer reports a local whitelist result (result code: 1).\nNOTE: You will not see this result unless you Arm support have customized your rulebase and added white rules for you.  truncate =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: reject\nAction to take when MessageSniffer reports a GBUdb result of 'truncate' (result code: 20).\nNOTE: GBUdb IP lookups during the data phase can be different than the connecting IP address if you have configured\nSource and DrillDown options in the Training section of SNFServer.xml.  caution =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: continue\nAction to take when MessageSniffer reports a GBUdb result of 'caution' (result code: 40).\nNOTE: GBUdb IP lookups during the data phase can be different than the connecting IP address if you have configured\nSource and DrillDown options in the Training section of SNFServer.xml.  black =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Default: continue\nAction to take when MessageSniffer reports a GBUdb result of 'black' (result code: 63).\nNOTE: GBUdb IP lookups during the data phase can be different than the connecting IP address if you have configured\nSource and DrillDown options in the Training section of SNFServer.xml.  code_NN =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  NOTE: replace NN with the numeric MessageSniffer   result code \nAction to take when MessageSniffer reports a result code other than those explicitly defined above.  nonzero =    accept | allow | continue | retry | tempfail | reject | quarantine | tag  Defalt: reject\nAction to take for any non-zero result code other than those explicity defined above.  This is a catch-all result that\nis checked last after all other settings have been checked so you can define a code_NN value to prevent this action from\nbeing taken.  Actions   accept  Accept the message and skip further plugins (whitelist).  allow | continute  Continue to the next plugin.  retry | tempfail  Reject the message with a temporary failure message (DENYSOFT).  reject  Reject the message with a permanent failure message (DENY).  quarantine  Continue to the next plugin.  If the message isn't rejected by another plugin - it will cause the message to be quarantined\nand the message will not be delivered to the recipient(s).  NOTE: this option requires the queue/quarantine plugin in your config/plugins files and it must be listed before any\nother queue plugins.  tag  Tag the subject with the default 'tag_string' defined in the   main  section above, this will also set X-Spam-Flag: YES in\nthe message headers.   Once tagged, processing will continue to the next plugin.",{"id":498,"path":499,"dir":218,"title":500,"description":501,"keywords":502,"body":504},"content:8.plugins:p0f.md","/plugins/p0f","p0f - TCP Fingerprinting plugin for Haraka","Haraka p0f plugin - TCP Fingerprinting",[229,503],"Startup","  p0f plugin  Use TCP fingerprint info (remote computer OS, network distance, etc) to\nimplement more sophisticated anti-spam policies.  This plugin inserts a   p0f  connection note with information deduced\nfrom the TCP fingerprint. The note typically includes at least the link,\ndetail, distance, uptime, genre. Here's an example:  genre    => FreeBSD\ndetail   => 8.x (1)\nuptime   => 1390\nlink     => ethernet/modem\ndistance => 17  Which was parsed from this p0f fingerprint:  24.18.227.2:39435 - FreeBSD 8.x (1) (up: 1390 hrs)\n-> 208.75.177.101:25 (distance 17, link: ethernet/modem)  The following additional values may also be available in\nthe   p0f  connection note:   magic, status, first_seen, last_seen, total_conn, uptime_min, up_mod_days, last_nat, last_chg, distance, bad_sw, os_match_q, os_name, os_flavor, http_name, http_flavor, link_type, and language.\n  Configuration   start p0f  Create a startup script for p0f that creates a communication socket when your\nserver starts up.   /usr/local/bin/p0f -u smtpd -d -s /tmp/.p0f_socket 'dst port 25 or dst port 587'\nchown smtpd /tmp/.p0f_socket\n  2. configure p0f plugin  add an entry to config/plugins to enable p0f:   p0f\n  3. review settings in config/p0f.ini  Startup  In the contrib/ubuntu-upstart directory is a config file (p0f.conf) for Ubuntu.  In the contrib/bsd-rc.d directory is a startup file for FreeBSD.",{"id":506,"path":507,"dir":218,"title":508,"description":509,"keywords":510,"body":511},"content:8.plugins:prevent_credential_leaks.md","/plugins/prevent_credential_leaks","prevent_credential_leaks - Prevent credential leaks plugin for Haraka","Haraka prevent_credential_leaks plugin - Prevent credential leaks",[229],"  prevent_credential_leaks plugin  This plugin prevents an authenticated user (via SMTP AUTH) from sending\ntheir username and password out in a message (e.g. like replying to a\nphish).  If their username and password are detected inside the message body, then\nthe message is rejected with the message:   Credential leak detected: never give out your username/password to anyone!\n  Note that if the username is qualified e.g.   user@domain.com  - then the\nplugin will search for both   user  and   user@domain.com  for maximum\neffectiveness.  Configuration  No configuration is required.  Simply add the plugin to your   config/plugins \nfile.  It should be added before any other plugins that run on hook_data_post\nfor maximum efficiency.",{"id":513,"path":514,"dir":218,"title":515,"description":516,"keywords":517,"body":518},"content:8.plugins:process_title.md","/plugins/process_title","process_title - Process title plugin for Haraka","Haraka process_title plugin - Set the process title",[],"  process_title plugin  This plugin causes the process title seen by the UNIX 'ps' command to\nbe modified from this:     node   haraka.js   -c   /etc/haraka\n  to this:   Haraka (master) cn=11148 cc=1082 cps=21/25.24/79 rcpts=144950/1.84 rps=518/328.18/586 msgs=78815/7.07 mps=302/178.44/329 out=0/0/0 respawn=0 \n \\_ Haraka (worker) cn=1646 cc=140 cps=5/3.73/17 rcpts=20310/1.86 rps=75/46.04/102 msgs=10938/6.65 mps=42/24.8/56 out=0/0/0 \n \\_ Haraka (worker) cn=1563 cc=168 cps=3/3.54/18 rcpts=19844/1.87 rps=78/45/96 msgs=10627/6.8 mps=49/24.1/53 out=0/0/0 \n \\_ Haraka (worker) cn=1852 cc=172 cps=3/4.2/16 rcpts=26278/2.03 rps=93/59.56/114 msgs=12938/6.99 mps=40/29.33/65 out=0/0/0 \n \\_ Haraka (worker) cn=1704 cc=187 cps=5/3.86/14 rcpts=23688/1.84 rps=93/53.7/125 msgs=12886/7.56 mps=64/29.21/66 out=0/0/0 \n \\_ Haraka (worker) cn=2296 cc=218 cps=2/5.2/20 rcpts=29300/1.78 rps=117/66.4/125 msgs=16489/7.18 mps=40/37.37/66 out=0/0/0 \n \\_ Haraka (worker) cn=2091 cc=195 cps=4/4.74/16 rcpts=25646/1.71 rps=84/58.12/117 msgs=14982/7.16 mps=52/33.95/66 out=0/0/0 \n  where:   cn = Total number of connections  cc = Total number of concurrent connections  cps = Number of connections in the last second / average / maximum  rcpts = Total number of recipients / Average number of recipients per message  rps = Number of recipients in the last second / average / maximum  msgs = Total number of messages / Average number messages per connection  mps = Number of messages in the last second / average / maximum  out = Mails being processed / Mails waiting to be processed / Mails in temp fail state  respawn = Number of worker processes respawned (only under cluster)  If 'cluster' is used then the master process will show the total\nacross all workers, with the exception of outbound stats.  All of the counts shown are since the process started, so if a\nworker has been re-started then the counts may not add up.  Note: this plugin will only work on node >= 0.8 and should be\nadded at the top of config/plugins to ensure that it functions\ncorrectly.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":520,"path":521,"dir":522,"title":523,"description":524,"keywords":525,"body":526},"content:8.plugins:queue:deliver.md","/plugins/queue/deliver","queue","queue/deliver - Deliver mail to the local MTA","Haraka queue/deliver plugin - Deliver mail to the local MTA",[],"  queue/deliver plugin  This plugin is now redundant. Outbound delivery is now built into Haraka.",{"id":528,"path":529,"dir":522,"title":530,"description":531,"keywords":532,"body":533},"content:8.plugins:queue:discard.md","/plugins/queue/discard","discard - Discard mail","Haraka discard plugin - Discard mail",[],"  discard plugin  This plugin will discard a message by pretending that the message was queued.  It is designed to be used by other plugins which request the message be\ndiscard by setting a connection or transaction note that this plugin\nchecks.  It uses the 'queue' hook, so it runs after all the plugins that hook on   data_post .  If you use the 'quarantine' plug-in then this plugin should run   after  it.  USE THIS PLUGIN WITH CARE!  Enable  Enable by adding a   queue/discard  entry in   config/plugins    before  your\nother queue plugins that perform actual deliveries.  Usage  Set     connection.notes.discard   =   [   1   |   true   ];\n  or     connection.transaction.notes.discard   =   [   1   |   true   ];\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":535,"path":536,"dir":522,"title":537,"description":538,"keywords":539,"body":540},"content:8.plugins:queue:lmtp.md","/plugins/queue/lmtp","queue/lmtp - Deliver mail to the local MTA","Haraka queue/lmtp plugin - Deliver mail to the local MTA",[229],"  queue/lmtp plugin  This plugin delivers inbound mail via LMTP.  Configuration  LMTP is enabled by adding   queue/lmtp  to config/plugins. LMTP delivery is configured in   config/lmtp.ini  . By default, all inbound messages are forwarded to the host specified in the   [main]  section. Domain specific routes can be specified by creating additional sections with the same host/port or path options.  lmtp.ini     ; defaults\n   host  =localhost\n   port  =24\n   \n   [example1.com]\n   ; Goes elsewhere\n   host  =10.1.1.1\n   port  =2400\n   \n   [example2.com]\n   ; Using unix domain sockets\n   path   = /tmp/blah_com_socket\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":542,"path":543,"dir":522,"title":544,"description":545,"keywords":546,"body":547},"content:8.plugins:queue:qmail-queue.md","/plugins/queue/qmail-queue","queue/qmail-queue - Deliver mail to the local MTA","Haraka queue/qmail-queue plugin - Deliver mail to the local MTA",[229],"  queue/qmail-queue plugin  This plugin delivers the mail to the   qmail-queue  program, which can be used\nfor both inbound and outbound delivery.  Configuration   qmail-queue.path  The path to the   qmail-queue  binary. Default:   /var/qmail/bin/qmail-queue  qmail-queue.ini   enable_outbound=true  Deliver outbound email to qmail. Set to false to use Haraka's\nseparate Outbound mail routing (MX based delivery)).",{"id":549,"path":550,"dir":522,"title":551,"description":552,"keywords":553,"body":554},"content:8.plugins:queue:quarantine.md","/plugins/queue/quarantine","quarantine - Quarantine mail","Haraka quarantine plugin - Quarantine mail",[229,119],"  quarantine plugin  This plugin will save a message (in message/rfc822 format) to a specified\ndirectory, which will be created automatically if it does not already exist,\na dated sub-folder is also added to the end of the path specified in YYYYMMDD\nformat.  It is designed to be used by other plugins which request the message be\nquarantined by setting a connection or transaction note that this plugin\nchecks.  NOTE: this plugin simply saves a copy of the message.  It does not reject or\ndiscard the message and relies on another plugin to perform this function.  It uses the 'queue' hook, so that it runs after all the 'data_post' plugins\nand should be listed in 'config/plugins' to run before your queue hooks that\nperform actual deliveries.  To ensure that only completely written files are present in the quarantine,\nthe files are written to a temporary directory first and then hardlinked to\nthe final destination before the temporary file is deleted.  The temporary directory is 'quarantine_path/tmp' which defaults to:\n/var/spool/haraka/quarantine/tmp.  Upon start-up, any files present in the temporary directory are deleted\nsyncronously prior to any messages being accepted.  Configuration  This plugin looks for 'quarantine.ini' in the config directory.   quarantine_path                   (default: /var/spool/haraka/quarantine)  The default base path to save the quarantine files to.  It will be created\nif it does not already exist.  Usage  If you wish to keep a copy of the message in your plugin, simply either:     connection.notes.quarantine   =   [   1   |   true   |   'sub/directory/path'   ];\n  or     connection.transaction.notes.quarantine   =   [   1   |   true   |   'sub/directory/path'   ];\n  e.g.     connection.notes.quarantine   =   1  ;\n  would save the message to '/var/spool/quarantine/haraka/YYYYMMDD/UUID' where\nYYYMMDD and UUID are expanded to current date and transaction UUID.  and     connection.notes.quarantine   =   'corpus'  ;\n  would save the message to '/var/spool/quarantine/haraka/corpus/YYYYMMDD/UUID'.  Note: you can specify 'corpus/foo' or 'corpus/foo/bar' and the directories will\nbe automatically created.  Do not add any leading or trailing slashes.  By default - after the message is quarantined, the plugin will tell Haraka to\ncontinue to the next plugin.  You can specify a different action like DENY or\nOK and supply an optional message using the following notes:     connection.notes.quarantine_action   =   [   OK  ,   'Message quarantined'   ];\n   connection.transaction.notes.quarantine_action   =   [   DENY  ,   'Message rejected'   ];\n  If you don't want to supply a specific message back to the client you can\nalso just specify a return code:     connection.notes.quarantine_action   =   OK  ;\n   connection.transaction.notes.quarantine_action   =   DENY  ;\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":556,"path":557,"dir":522,"title":558,"description":559,"keywords":560,"body":561},"content:8.plugins:queue:rabbitmq.md","/plugins/queue/rabbitmq","queue/rabbitmq - Deliver mail to the RabbitMQ queue","Haraka queue/rabbitmq plugin - Deliver mail to the RabbitMQ queue",[229],"  queue/rabbitmq plugin  This plugin delivers mails to rabbitmq queue for further processing.  Configuration    config/rabbitmq.ini \nThis config file provides server address and port of rabbitmq server to deliver with other configs of queues and exchange.  Example:     [rabbitmq]\n   ; This is name of exchange.\n   exchangeName    = emailMessages\n   ; ip and port of the server.\n   server_ip   = localhost\n   server_port   = 5672\n   ; user and password\n   user   = guest\n   password   = guest\n   ; name of the queue which reader will read\n   queueName   = email\n   ; This is for making it persistant while publishing message\n   deliveryMode   = 2\n   ; If true it will require ack for marking it complete from worker\n   confirm   = true\n   ; Again for persistance passed while creating queue\n   durable   = true\n   ; if true will delete queue if publisher quits\n   autoDelete   = false\n   ; type of the exchange\n   exchangeType   = direct\n  More information about rabbitmq can be found at   https://www.rabbitmq.com/  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":563,"path":564,"dir":522,"title":565,"description":566,"keywords":567,"body":569},"content:8.plugins:queue:rabbitmq_amqplib.md","/plugins/queue/rabbitmq_amqplib","queue/rabbitmq_amqplib - Deliver mail to the RabbitMQ queue","Haraka queue/rabbitmq_amqplib plugin - Deliver mail to the RabbitMQ queue",[568,229],"Dependency","  queue/rabbitmq_amqplib plugin  This plugin delivers emails to RabbitMQ queue for further processing. Based on   queue/rabbitmq  but using   amqplib .  Dependency    amqplib  -   https://github.com/squaremo/amqp.node  Configuration    config/rabbitmq.ini  - Connection, exchange and queue settings  Example:     [rabbitmq]\n   ; Connection\n   ; Protocol. Either \"amqp\" or \"amqps\"\n   protocol   = amqp\n   host   = localhost\n   port   = 5672\n   ;Virtual Host. Start with \"/\". Leave blank or not use if you don't want to use virtual hosts.\n   vhost   = /haraka\n   ;Credentials\n   user   = guest\n   password   = guest\n   ; Exchange\n   exchangeName    = email_messages\n   exchangeType   = direct\n   ; Queue\n   queueName   = emails\n   deliveryMode   = 2\n   confirm   = true\n   durable   = true\n   autoDelete   = false\n  More information about RabbitMQ can be found at   https://www.rabbitmq.com/  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":571,"path":572,"dir":522,"title":573,"description":574,"keywords":575,"body":576},"content:8.plugins:queue:smtp_bridge.md","/plugins/queue/smtp_bridge","queue/smtp_bridge - Deliver mail to the local MTA","Haraka queue/smtp_bridge plugin - Deliver mail to the local MTA",[229],"  queue/smtp_bridge plugin  This plugin delivers to another SMTP server, bridging the authentication\ndetails and post data from the initial connection.  This plugin is meant to be used with the plugin   auth/auth_bridge .  It is different than   queue/smtp_proxy  or   queue/smpt_forward  because\nit doesn't use the AUTH details from a configuration file. This plugins\nsimply post the data from the original connection to the remote SMTP server\nusing the original AUTH details.  Configuration  Configuration is stored in   config/smtp_bridge.ini  and uses the INI\nstyle formatting.  The configuration of this plugin is simple:     host  =localhost\n   #port=\n   #auth_type=\n   #priority=10\n   host: the host where you will be authenticating and posting,\nfor example   smtp.host.tld . This is the only setting required.  If needed you can also set   port: default to empty and Haraka will use 25.  auth_type: default to empty and Haraka will try to pick an appropriate method.  priority: default to 10.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":578,"path":579,"dir":522,"title":580,"description":581,"keywords":582,"body":583},"content:8.plugins:queue:smtp_forward.md","/plugins/queue/smtp_forward","queue/smtp_forward - Forward mail to another SMTP server","Haraka queue/smtp_forward plugin - Forward mail to another SMTP server",[229],"  queue/smtp_forward plugin  This plugin delivers to another mail server. This is a common setup when you\nwant to have a mail server with a solid pedigree of outbound delivery to\nother hosts, and inbound delivery to users.  In comparison to   queue/smtp_proxy , this plugin waits until queue time to\nattempt the ongoing connection. This can be a benefit in reducing connections\nto your inbound mail server when you have content filtering (such as\nspamassassin) enabled. A possible downside is that it also delays recipient\nvalidation that the ongoing mail server may provide until queue time.  Configuration   smtp_forward.ini  Configuration is stored in this file in the following keys:   enable_outbound=  true  SMTP forward outbound messages (set to false to enable Haraka's separate\nOutbound mail routing (MX based delivery)).  host=HOST  The host to connect to.  port=PORT  The port to connect to. Default: 25  connect_timeout=SECONDS  The maximum amount of time to wait when creating a new connection\nto the host.  Default: 30 seconds.  timeout=SECONDS  The amount of seconds to let a backend connection live idle in the\nconnection pool.  This should always be less than the global plugin\ntimeout, which should in turn be less than the connection timeout.  max_connections=NUMBER  Maximum number of connections at any given time. Default: 1000  enable_tls=  true  Enable TLS with the forward host (if supported). TLS uses options\nfrom the tls plugin. If key and cert are provided in the the outbound section of the tls plugin,\nthat certificate will be used as a TLS Client Certificate.  This option controls the use of TLS via   STARTTLS . This plugin does not work with\nSMTP over TLS.  auth_type=  plain|login  Enable PLAIN or LOGIN SMTP AUTH.  This is required to enable AUTH.  auth_user=USERNAME  SMTP AUTH username to use.  auth_pass=PASSWORD  SMTP AUTH password to use.  queue  Which queue plugin to use. Default: undefined. The default bahavior is to\nuse smtp_forward for inbound connections and outbound for relaying\nconnections. This option is used for complex mail routes.  check_sender=false  Requires that sender domains defined in smtp_forward.ini (see Per-Domain below) have relaying privileges. This is a form of spoof prevention and assumes that any mail clients have relaying or AUTH privileges. This is usually the case.  check_recipient=false  By default, Haraka accepts no emails until a recipient plugin has been configured to accept mails for a domain. The simplest common case is the in_host_list plugin with a list of domains in config/host_list. An alternative is to set   check_recipient=true  and list each domain in a definition block in smtp_forward.ini (see Per-Domain Configuration). An example for two domains:   example.com  example.net  Per-Domain Configuration  More specific forward routes for domains can be defined. The domain is\nchosen based on the value of the   domain_selector  config variable.  When   domain_selector  is set to   rcpt_to  (the default), more specific\nroutes are only honored for SMTP connections with a single recipient or SMTP\nconnections where every recipient host is identical.  When   domain_selector  is set to   mail_from , the domain of the MAIL FROM\naddress is used.  enable_outbound can be set or unset on a per-domain level to enable or disable\nforwarding for specific domains.     # default SMTP host\n   host  =1.2.3.4\n   # auth_type=plain\n   # auth_user=user\n   # auth_user=pass\n   \n   [example1.com]\n   host  =1.2.3.5\n   # auth_type=plain\n   # auth_user=user\n   # auth_pass=pass\n   \n   [example2.com]\n   host  =1.2.3.5\n   \n   [example3.com]\n   host  =1.2.3.6\n   \n   [example4.com]\n   enable\\  _outbound  =false\n  Split host forward routing  When an incoming email transaction has multiple recipients with different forward routes,  recipients to subsequent forward routes are deferred. Example: an incoming email transaction has recipients   user@example1.com ,   user@example2.com , and   user@example3.com . The first two recipients will be accepted (they share the same forward destination) and the latter will be deferred. It will arrive in a future delivery attempt by the remote.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":585,"path":586,"dir":522,"title":587,"description":588,"keywords":589,"body":590},"content:8.plugins:queue:smtp_proxy.md","/plugins/queue/smtp_proxy","queue/smtp_proxy - Deliver mail to the proxy MTA","Haraka queue/smtp_proxy plugin - Deliver mail to the proxy MTA",[229],"  queue/smtp_proxy plugin  This plugin delivers to another mail server. This is a common setup when you\nwant to have a mail server with a solid pedigree of outbound delivery to\nother hosts, and inbound delivery to users.  In comparison to   queue/smtp_forward , this plugin makes a connection at\nMAIL FROM time to the ongoing SMTP server. This can be a benefit in that\nyou get any SMTP-time filtering that the ongoing server provides, in\nparticular one important facility to some setups is recipient filtering.\nHowever be aware that other than connect and HELO-time filtering, you will\nhave as many connections to your ongoing SMTP server as you have to Haraka.  Configuration   smtp_proxy.ini  Configuration is stored in this file in the following keys:   enable_outbound=  true  SMTP proxy outbound messages (set to false to enable Haraka's\nseparate Outbound mail routing (MX based delivery)).   host=HOST  The host to connect to.  port=PORT  The port to connect to.  connect_timeout=SECONDS  The maximum amount of time to wait when creating a new connection\nto the host.  Default if unspecified is 30 seconds.  timeout=SECONDS  The amount of seconds to let a backend connection live idle in the\nproxy pool.  This should always be less than the global plugin timeout,\nwhich should in turn be less than the connection timeout.  max_connections=NUMBER  Maximum number of connections to create at any given time.  enable_tls=  true|yes|1  Enable TLS with the forward host (if supported). TLS uses options from\nthe tls plugin.  auth_type=  plain|login  Enable PLAIN or LOGIN SMTP AUTH.  This is required to enable AUTH.  auth_user=USERNAME  SMTP AUTH username to use.  auth_pass=PASSWORD  SMTP AUTH password to use.",{"id":592,"path":593,"dir":218,"title":594,"description":595,"keywords":596,"body":598},"content:8.plugins:rcpt_to.in_host_list.md","/plugins/rcpt_to.in_host_list","rcpt_to.in_host_list - Check if recipient is in host_list","Haraka rcpt_to.in_host_list plugin - Check if recipient is in host_list",[229,597],"Relaying","  rcpt_to.in_host_list plugin  This plugin is the mainstay of an inbound Haraka server. It should list the\ndomains that are local to the host. Mails that have RCPT TO not matching\na host in the given list will be passed onto other rcpt hooks. If no rcpt\nhook accepts the connection, it will be rejected.  Configuration   host_list  Specifies the list of hosts that are local to this server.  host_list_regex  Specifies the list of regexes that are local to this server.  Note\nall these regexes are anchored with ^regex$. One can choose not to\nanchor with .*. There is the potential for bad regexes to be\ntoo permissive if we don't anchor.  host_list.anti_spoof  When enabled, this will cause Haraka to reject any MAIL FROM where\nthe host appears within the host list but the connected host is not\na relay, e.g. connection.relaying is not set either by SMTP AUTH or\nanother plugin like 'relay'.  Relaying  This plugin checks to see if the MAIL FROM domain is local. When\nconnection.relaying is detected (haraka -h relay) and the MAIL FROM domain is\nlocal, this plugin will vouch for any RCPT. This limits relaying users to\nsending from local domains, which is much safer than letting relay clients\nsend from any domain.",{"id":600,"path":601,"dir":218,"title":602,"description":603,"keywords":604,"body":605},"content:8.plugins:rcpt_to.ldap.md","/plugins/rcpt_to.ldap","rcpt_to.ldap - LDAP plugin for Haraka","Haraka rcpt_to.ldap plugin - LDAP plugin",[],"  rcp_to.ldap plugin  This plugin tries to validate recipients against an LDAP server. This will help\nin replacing an existing qmail-ldap installation with Haraka.  The plugin assumes simple qmail-ldap style LDAP records. It is completely\nconfigurable using the   config/rcpt_to.ldap.ini  file.  The logic that is followed is:   Check if the recipient is for a local domain (ie. check if the domaiin is\npresent in   host_list )  Check if the recipient is already whitelisted  Run an LDAP search to see if the recipient can be found in LDAP.",{"id":607,"path":608,"dir":218,"title":609,"description":610,"keywords":611,"body":613},"content:8.plugins:rcpt_to.qmail_deliverable.md","/plugins/rcpt_to.qmail_deliverable","rcpt_to.qmail_deliverable - Check if recipient is deliverable","Haraka rcpt_to.qmail_deliverable plugin - Check if recipient is deliverable",[229,612],"Per-domain Configuration","  rcpt_to.qmail_deliverable plugin  A client for checking the deliverability of an email\naddress against the   qmail-deliverabled  daemon.  On incoming messages (relaying=false), the RCPT TO address is validated.  On outgoing messages (relaying=true) the MAIL FROM address is validated when\nthe   check\\_outbound  option is enabled.  Configuration  The host and port that qmail-deliverabled is listening on can be set by\naltering the contents of   config/rcpt_to.qmail_deliverable.ini    host  (Default: localhost)   port  (Default: 8998)   check_outbound =true  When   check_outbound  is enabled, and a connection has relay privileges, the\nMAIL FROM address is validated as deliverable.  Per-domain Configuration  Additionally, domains can each have their own configuration for connecting\nto qmail-deliverabled. The defaults are the same, so only the differences\nneeds to be declared. Example:   [example.com]\nhost=192.168.0.1\n\n[example2.com]\nhost=192.168.0.2\n",{"id":615,"path":616,"dir":218,"title":617,"description":618,"keywords":619,"body":620},"content:8.plugins:rcpt_to.routes.md","/plugins/rcpt_to.routes","rcpt_to.routes - Route mail to different hosts based on recipient","Haraka rcpt_to.routes plugin - Route mail to different hosts based on recipient",[],"  rcpt_to.routes plugin  Moved to   https://github.com/haraka/haraka-plugin-recipient-routes",{"id":622,"path":623,"dir":218,"title":624,"description":625,"keywords":626,"body":628},"content:8.plugins:record_envelope_addresses.md","/plugins/record_envelope_addresses","record_envelope_addresses - Record envelope addresses","Haraka record_envelope_addresses plugin - Record envelope addresses",[627,229],"Caveats","  record_envelope_addresses plugin  This plugin adds two new header lines.   X-Envelope-To: the envelope RCPT TO address  X-Envelope-From: the envelope MAIL FROM address  It is useful if you need to know the exact addresses used to send an email, e.g. when\nthe email was sent to you as BCC or if it is a newsletter. In both cases the recipient\naddress is normally not recorded in the headers.  Caveats  If you enable this plugin you may introduce a possible information leak, i.e. disclosure\nof BCC recipients. So you never want to use this on an outgoing mail server and maybe also\nnot if this server is used as a relay.  Configuration  This plugin has no configuration.",{"id":630,"path":631,"dir":218,"title":632,"description":633,"keywords":634,"body":636},"content:8.plugins:redis.md","/plugins/redis","redis - Redis plugin","Haraka redis plugin - Redis plugin",[67,119,635],"Publish/Subscribe Usage","  Redis plugin  Connects to a local (by default) redis instance and stores a   redis \nconnection handle at   server.notes.redis .  Config  The   redis.ini  file has the following sections (defaults shown):   server     ; host=127.0.0.1\n   ; port=6379\n   ; db=0\n   pubsub     ; host=127.0.0.1\n   ; port=6379\n  Publish & Subscribe are DB agnostic and thus have no db setting. If host and port and not defined, they default to the same as   server  settings.   opts   ; see https://www.npmjs.com/package/redis#overloading\n  Usage  Use redis in your plugin like so:     if   (server.notes.redis) {\n       server.notes.redis.  hgetall  (  ...  );\n           // or any other redis command\n   }\n  Publish/Subscribe Usage  In your plugin:     exports  .  results_init   =   function   (  next  ,   connection  ) {\n       var   plugin   =   this  ;\n       plugin.  redis_subscribe  (connection,   function   () {\n           connection.notes.redis.  on  (  'pmessage'  ,   function   (  pattern  ,   channel  ,   message  ) {\n               plugin.  do_something_with_message  (message,   ...  );\n           });\n           next  ();\n       });\n   }\n   // be nice to redis and disconnect\n   exports  .  hook_disconnect   =   function   (  next  ,   connection  ) {\n       this  .  redis_unsubscribe  (connection);\n   }\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":638,"path":639,"dir":218,"title":640,"description":641,"keywords":642,"body":647},"content:8.plugins:relay.md","/plugins/relay","relay - Relay outbound mail","Haraka relay plugin - Relay outbound mail",[643,644,645,646],"Authentication","ACL (Access Control List)","Force Route / Destination Domains","all","  relay plugin   MTAs  generally only accept mail for   local  domains they can deliver to. In Haraka, the   rcpt_to.*  plugins usually decide which domains and/or email addresses are deliverable. By default, everything else is rejected.   Relaying  is when a MTA accepts mail that is destined elsewhere. Back in the day (1980s), most MTAs permitted open relaying. Soon spammers abused our open relays (1990s) and left us with soiled mail queues. Now nearly all MTAs have relaying disabled and   MUAs  are required to use a   MSA  to relay. Most MTAs (including Haraka) have MSA features and can serve both purposes.  This   relay  plugin provides Haraka with options for managing relay permissions.  Authentication  One way to enable relaying is   authentication  via the auth plugins. Successful authentication enables relaying during   that  SMTP connection. To securely offer SMTP AUTH, the   tls  plugin and at least one auth plugin must be enabled and properly configured. When that requirement is met, the AUTH SMTP extension will be advertised to SMTP clients.   % nc mail.example.com 587\n220 mail.example.com ESMTP Haraka 2.4.0 ready\nehlo client.example.com\n250-mail.example.com Hello client.example.com [192.168.0.1], Haraka is at your service.\n250-PIPELINING\n250-8BITMIME\n250-SIZE 10000000\n250 STARTTLS\nquit\n221 mail.example.com closing connection. Have a jolly good day.\n  Notice that there's no AUTH advertised. We only permit authentication when the\nconnection is secured with TLS:     % openssl s_client -connect mail.example.com:587 -starttls smtp\n   CONNECTED(00000003)\n   \u003Csnip long SSL certificate details>\n   ---\n   250 STARTTLS\n   ehlo client.example.com\n   250-mail.example.com Hello client.example.com [192.168.1.1], Haraka is at your service.\n   250-PIPELINING\n   250-8BITMIME\n   250-SIZE 10000000\n   250 AUTH PLAIN LOGIN\n   quit\n   221 mail.example.com closing connection. Have a jolly good day.\n   closed\n  To avoid port 25 restrictions, in 1998 we developed   SMTP submission  on port 587. As of January 2018,   RFC 8314  resurrects   SMTPS  on port 465 in favor of port 587 with STARTTLS. For optimal security and reliability,   MUAs  should be configured to send mail to port 465 with TLS.  ACL (Access Control List)  ACL processing is enabled by setting acl=true in the   relay  section of\nrelay.ini:   [relay]\nacl=true\n  With the Access Control List feature, relaying can be enabled for IPv4 and\nIPv6 networks. IP ranges listed in the ACL file are allowed to send mails\nwithout furthur checks.    config/relay_acl_allow  Allowed IP ranges in CIDR notation, one per line.  Back in the day, ISPs enabled all of their IP space to relay. That proved\nproblematic for users who took their laptops and mobile phones elsewhere and\nthen couldn't send mail. For end users therefore, use SMTP AUTH described\nabove. If you reside somewhere technology evolves more slowly, you can still\nadd IP allocations to   relay_acl_allow  like so:   echo 'N.N.N.N/24' >> /path/to/haraka/config/relay_acl_allow\n  A common use case for IP based relaying is to relay messages on behalf of\nanother mail server. If your organization has an Exchange server, using Haraka\nto filter inbound messages is a great choice. You might also want to relay\noutbound messages via Haraka as well, so they can be DKIM signed on their way\nto the internet. For such a use case, you would set 'acl=true' (the default)\nin the   relay  section of   relay.ini  and then add the external IP address\nof the corporate firewall to   config/relay_acl_allow :   echo 'N.N.N.N/32' >> /path/to/haraka/config/relay_acl_allow\n  Force Route / Dest  ination  Domains  Force routes and Destination Domains are enabled by setting in the   relay \nsection of relay.ini:   [relay]\nforce_routing=false  (default: false)\ndest_domains=false   (default: false)\n  These two features share another common config file:    config/relay_dest_domains.ini  The format is ini and entries are within the   domains  section. The key for each entry is the domain and the value is a JSON string. Within the JSON string, the currently supported keys are:   * action  (Dest Domains)\n* nexthop (Force Route)\n  Force Route  Think of force route as the equivalent of the transport map in Postfix or the smtproutes file in Qmail. Rather than looking up the MX for a host, the   nexthop  value from the entry in the config file is used.  The value of \"nexthop\": can be a hostname or an IP, optionally follow by   .  Example:   [domains]\ntest.com = { \"action\": \"continue\", \"nexthop\": \"127.0.0.1:2525\" }\n  Destination Domains  Allowed destination/recipient domains. The field within the JSON value used\nby Dest Domains is \"action\": and the possible values are accept, continue, or\ndeny.   * accept   (accept the mail without further checks)\n  Example:   [domains]\ntest.com = { \"action\": \"accept\" }\n  I think of   accept  as the equivalent of qmail's   rcpthosts , or a misplaced Haraka   rcpt_to.*  plugin. The   accept  mechanism is another way to tell Haraka that a particular domain is one we accept mail for. The difference between this and the   rcpt_to.in_host_list  plugin is that this one also enables relaying.   * continue (mails are subject to further checks)\n  Example:   [domains]\ntest.com = { \"action\": \"continue\" }\n  Because the default behavior of Dest Routes is to deny, the   continue  option provides an escape, permitting another Haraka plugin to validate the recipient. Like the   accept  option, it too enables relaying.   * deny    (mails are rejected)\n  This deny option baffles me. The default behavior of Haraka is to reject emails for\nwhich a recipient validation plugin hasn't vouched. Adding it here prevents\nany subsequent recipient validation plugin from getting a chance. It also\nnecessitates the continue option.  all  Relay all is enabled by setting all=true in the   relay  section of\nrelay.ini:   [relay]\nall=true     (default: false)\n  Relay all is useful for spamtraps to accept all mail.  Do NOT use this on a real mail server, unless you really know what you are\ndoing. If you use the all feature with anything that relays mail (such\nas forwarding to a real mail server, or the   deliver  plugin), your mail\nserver is now an open relay.  This is BAD. Hence the big letters. In short: DO NOT USE THIS FEATURE.  It is useful for testing and spamtraps, hence its presence.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":649,"path":650,"dir":218,"title":651,"description":652,"keywords":653,"body":654},"content:8.plugins:reseed_rng.md","/plugins/reseed_rng","reseed_rng - Reseed the random number generator","Haraka reseed_rng plugin - Reseed the random number generator",[],"  Reseed RNG plugin  The V8 that ships with node 0.4.x uses an unsophisticated method of\nseeding its random number generator- it simply uses the current time\nin ms.  Worse, that version of V8 (at least) doesn't provide a way\nto explicitly reseed the RNG.  In situations where multiple processes can spawn in the same\nms, processes can be seeded with the same value, leading to bad\nproblems like UUID collisions. When using the 'cluster' module, it's\nquite easy to observe this behavior.  This plugin uses David Bao's reseed.js (see   http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html )\nto provide a reseedable Math.random(), and hooks the init_child event\nto reseed the RNG with a sligtly better seed at spawned-process startup\ntime.  All users of the 'cluster' module should consider using this plugin.",{"id":656,"path":657,"dir":218,"title":658,"description":659,"keywords":660,"body":661},"content:8.plugins:rspamd.md","/plugins/rspamd","rspamd - Rspamd plugin","Haraka rspamd plugin - Rspamd plugin",[229],"  Rspamd plugin  This plugin facilitates scanning messages with Rspamd.  Configuration  rspamd.ini   host  Default: localhost  Host to connect to to query Rspamd.  port  Default: 11333  Port Rspamd is listening on.  add_headers  Default: sometimes  Possible values are:     \"always\" - always add headers\n  \"never\" - never add headers (unless provided by rspamd - see rmilter\\_headers)\n  \"sometimes\" - add headers when rspamd recommends `add header` action\n  Format of these headers is governed by header.* settings  reject.message  Default: Detected as spam  Message to send when rejecting mail due to Rspamd policy recommendation.  reject.spam  Default: true  If set to false, ignore recommended   reject  action from Rspamd (except\nfor authenticated users).  reject.authenticated  Default: false  Reject messages from authenticated users if Rspamd recommends   reject .  check.authenticated  Default: false  If true, messages from authenticated users will not be scanned by Rspamd.  check.private_ip  Default: false  If false, messages from private IPs will not be scanned by Rspamd.\nIf true, messages from private IPs will be scanned by Rspamd.  dkim.enabled  Default: true  If set to true, allow rspamd to add DKIM signatures to messages.  header.bar  Default: undefined  If set, add a visual spam level in a header with this name.  header.report  Default: undefined  If set, add information about symbols matched & their scores in a header\nwith this name.  header.score  Default: undefined  If set, add the numeric spam score in a header with this name.  rmilter_headers.enabled  Default: true  If set to true, allow rspamd to add/remove headers to messages via   task:rmilter_set_reply() .  soft_reject.enabled  Default: true  If set to true, allow rspamd to defer messages.  soft_reject.message  Default: Deferred by policy  Message to send to remote server on rspamd soft rejection.  spambar.positive  Default: +  Used as character for visual spam-level where score is positive.  spambar.negative  Default: -  Used as character for visual spam-level where score is negative.  spambar.neutral  Default: /  Used as character for visual spam-level where score is zero.  timeout (in seconds)  Default: 29 seconds  How long to wait for a response from rspamd.",{"id":663,"path":664,"dir":218,"title":665,"description":666,"keywords":667,"body":669},"content:8.plugins:spamassassin.md","/plugins/spamassassin","spamassassin - SpamAssassin integration for Haraka","Haraka spamassassin plugin - SpamAssassin integration for Haraka",[229,668],"Changes","  SpamAssassin plugin  This plugin implements the spamd protocol and will send messages to\nspamd for scoring.  Configuration  spamassassin.ini   spamd_socket = [host:port | /path/to/socket]    optional  Default: localhost:783  Host or path to socket where spamd is running.  spamd_user = [user]     optional  Default: default  Username to pass to spamd.  This is useful when you are running\nspamd with virtual users.  You can also pass this value in dynamically by setting:    connection.transaction.notes.spamd_user  in another plugin.  The special username:   first-recipient . The first envelope recipient\nwill be used as the username.  the special username   all-recipients  may eventually be supported. See\nthe get_spamd_username function in the plugin.  max_size = N    optional  Default: 500000  Maximum size of messages (in bytes) to send to spamd.\nMessages over this size will be skipped.  reject_threshold = N     optional  Default: none (do not reject any mail)  SpamAssassin score at which the mail should be rejected.  relay_reject_threshold = N    optional  Default: none  As above, except this threshold only applies to connections\nthat are relays (e.g. AUTH) where connection.relaying = true.\nThis is used to set a   lower  thresold at which to reject mail\nfrom these hosts to prevent sending outbound spam.  If this is not set, then the   reject_thresold  value is used.  munge_subject_threshold = N    optional  Default: none (do not munge the subject)  Score at which the subject should be munged (prefixed).  subject_prefix = [prefix]     optional  Default: *** SPAM ***  Prefix to use when munging the subject.  old_headers_action = [rename | drop | keep]     optional  Default: rename  If old X-Spam-* headers are in the email, what do we do with them?   rename  them to X-Old-Spam-*.   drop  will delete them.   keep  will keep them (new X-Spam-* headers appear lower down in\nthe headers then).  connect_timeout = N    optional  Default: 30  Time in seconds to wait for a connection to spamd  results_timeout = N    optional  Default: 300  Time in seconds to wait for results from spamd   check  The optional check section can allow skipping SpamAssassin check for remote connection\nmeeting following criteria.   authenticated  Default: true  If true, messages from authenticated users will be scored.  private_ip  Default: true  If true, messages from private IPs will be scored.  local_ip  Default: true  If true, messages from localhost will be scored.  relay  Default: true  If true, messages that are to be relayed will be scored.   defer  The optional defer section can allow returning a DENYSOFT status back to the\nclient.  Setting these to true will force the client to retry later in cases where\nspamassassin is not responding properly.  If set to false, then the errors\nwill be ignored and message processing will continue.   error  Default: false  If true, return DENYSOFT on socket errors  connect_timeout  Default: false  If true, return DENYSOFT on socket connection timeouts  scan_timeout  Default: false  If true, return DENYSOFT on scan timeouts  Extras  A SpamAssassin plugin can be found in the   contrib  directory.\nThe   Haraka.\\[pm|cf\\]  files should be placed in the SpamAssassin local\nsite rules directory (/etc/mail/spamassassin on Linux), spamd should be\nrestarted and the plugin will make spamd output the Haraka UUID as part\nof its log output to aid debugging when searching the mail logs.  Changes  This plugin now passes the X-Spam-* headers generated by SA through\nunaltered. You can control the presence and appearance of X-Spam-*\nheaders by editing your SpamAssassin config.  The default headers added by SpamAssassin are:   add_header all Checker-Version SpamAssassin _VERSION_ (_SUBVERSION_) on _HOSTNAME_\nadd_header spam Flag _YESNOCAPS_\nadd_header all Level _STARS(\\*)_\nadd_header all Status \"_YESNO_, score=_SCORE_ required=_REQD_ tests=_TESTS_ autolearn=_AUTOLEARN_ version=_VERSION_\"\n  Other headers options you might find interesting or useful are:   add_header all DCC _DCCB_: _DCCR_\nadd_header all Tests _TESTS_\n",{"id":671,"path":672,"dir":218,"title":673,"description":674,"keywords":675,"body":676},"content:8.plugins:spf.md","/plugins/spf","spf - SPF plugin for Haraka","Haraka spf plugin that implements SPF checks",[229,366],"  SPF plugin  This plugin implements RFC 4408 Sender Policy Framework (SPF)\nSee the   Wikipedia article on SPF  for details.  By default this plugin with only add trace Received-SPF headers to a message.\nTo make it reject mail then you will need to enable the relevant options below.\n  [deny]helo_fail  and   [deny]mfrom_fail  are the closest match for the intent\nof SPF but you will need to whitelist any hosts forwarding mail from another\ndomain whilst preserving the original return-path.  Configuration  This plugin uses spf.ini for configuration and the following options are\navailable:   [relay]\ncontext=sender   (default: sender)\n  On connections with relaying privileges (MSA or mail relay), it is often\ndesirable to evaluate SPF from the context of Haraka's public IP(s), in the\nsame fashion the next mail server will evaluate it when we send to them.\nIn that use case, Haraka should use context=myself.   * context=sender    evaluate SPF based on the sender (connection.remote.ip)\n* context=myself    evaluate SPF based on Haraka's public IP\n  The rest of the optional settings (disabled by default) permit deferring or\ndenying mail from senders whose SPF fails the checks.  Additional settings allow you to control the small things (defaults are shown):     ; The lookup timeout, in seconds. Better set it to something much lower than this.\n   lookup_timeout   = 29\n   \n   ; bypass hosts that match these conditions\n   [skip]\n   ; hosts that relay through us\n   relaying   = false\n   ; hosts that are SMTP AUTH'ed\n   auth   = false\n  There's a special setting that would allow the plugin to emit a funny explanation text on SPF DENY, essentially meant to be visible to end-users that will receive the bounce. The text is   http://www.openspf.org/Why?s=${scope}&id=${sender_id}&ip=${connection.remote.ip}  and is enabled by:     [deny]\n   openspf_text   = true\n   \n   ; in case you DENY on failing SPF on hosts that are relaying (but why?)\n   [deny_relay]\n   openspf_text   = true\n  Things to Know   Most senders do not publish SPF records for their mail server   hostname ,\nwhich means that the SPF HELO test rarely passes. During observation in 2014,\nmore spam senders have valid SPF HELO than ham senders. If you expect very\nlittle from SPF HELO validation, you might still be disappointed.  Enabling error deferrals will cause excessive delays and perhaps bounced\nmail for senders with broken DNS. Enable this only if you are willing to\ndelay and sometimes lose valid mail.  Broken SPF records by valid senders are common. Keep that in mind when\nconsidering denial of SPF error results. If you deny on error, budget\ntime for instructing senders on how to correct their SPF records so they\ncan email you.  The only deny option most sites should consider is   mfrom_fail . That will\nreject messages that explicitely fail SPF tests. SPF failures have a high\ncorrelation with spam. However, up to 10% of ham transits forwarders and/or\nemail lists which frequently break SPF. SPF results are best used as inputs\nto other plugins such as DMARC,   spamassassin , and   karma .  Heed well the implications of SPF, as described in   RFC 4408     [defer]\n   helo_temperror\n   mfrom_temperror\n   \n   [deny]\n   helo_none\n   helo_softfail\n   helo_fail\n   helo_permerror\n   \n   mfrom_none\n   mfrom_softfail\n   mfrom_fail\n   mfrom_permerror\n   \n   openspf_text\n   \n   ; SPF settings used when connection.relaying=true\n   [defer_relay]\n   helo_temperror\n   mfrom_temperror\n   \n   [deny_relay]\n   helo_none\n   helo_softfail\n   helo_fail\n   helo_permerror\n   \n   mfrom_none\n   mfrom_softfail\n   mfrom_fail\n   mfrom_permerror\n   \n   openspf_text\n  Testing  This plugin also provides a command-line test tool that can be used to debug SPF issues or to check results.  To check the SPF record for a domain:     # spf --ip 1.2.3.4 --domain fsl.com\n   ip  =  1.2.3.4   helo  =  \"\"   domain  =  \"fsl.com\"   result  =  Fail\n  To check the SPF record for a HELO/EHLO name:     # spf --ip 1.2.3.4 --helo foo.bar.com\n   ip  =  1.2.3.4   helo  =  \"foo.bar.com\"   domain  =  \"\"   result  =  None\n  You can add   --debug  to the option arguments to see a full trace of the SPF processing.  SPF Resource Record Type  Node does not support the SPF DNS Resource Record type. Only TXT records are\nchecked.  This is a non-issue as \u003C 1% (as of 2014) of SPF records use the SPF RR type.\nDue to lack of adoption, the next SPF revision will like likely deprecate the\nSPF RR type.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":678,"path":679,"dir":218,"title":680,"description":681,"keywords":682,"body":685},"content:8.plugins:status.md","/plugins/status","status - Status plugin","Haraka status plugin that allows you to view the status of your Haraka server",[683,684],"Communication","Available commands list","  Status plugin  This plugin allows to get internal status of queues and pools with SMTP commands sent from localhost.  Communication    Request  →   STATUS \u003CCMD> [param1] [param2]....   Response  ←   \u003CSMTP code 211 or 500>\u003Cspace>\u003Cjson encoded response>\\r\\n  Example   \u003C 220 example.com ESMTP Haraka ready\n> STATUS QUEUE LIST\n\u003C 211 {\"delivery_queue\":[],\"temp_fail_queue\":[]}\n  Available commands list    STATUS POOL LIST  - list of active pools   STATUS QUEUE STATS  - queue statistics in format \"\u003Cin_progress>/\u003Cdelivery_queue length>/\u003Ctemp_fail_queue length>\"   STATUS QUEUE LIST  - list of parsed queue files with   uuid, domain, mail_from, rcpt_to  attributes   STATUS QUEUE INSPECT  - returns content of   outbound.delivery_queue  and   outbound.temp_fail_queue   STATUS QUEUE DISCARD file  - stop delivering email file   STATUS QUEUE PUSH file  - try to re-deliver email immediately",{"id":687,"path":688,"dir":218,"title":689,"description":690,"keywords":691,"body":693},"content:8.plugins:syslog.md","/plugins/syslog","syslog - Logs to syslog plugin for Haraka","Haraka syslog plugin - Logs to syslog",[692],"Configuration syslog.ini","  syslog plugin  This plugin adds syslog support to haraka.  Most log levels in haraka\nalready map to valid levels in syslog.  Additional log levels in haraka\nfall under the DEBUG syslog level.  Note: this plugin requires modern-syslog and you need enable/add syslog inside config/plugins at the top of the file.  Configuration syslog.ini  This is the general configuration file for the syslog plugin.\nIn it you can find ways to customize the syslog service name, set the\nlogging facility, and set any syslog options you wish. For example:   [general]\nname=SomeOtherName\n  Sane defaults are\nchosen for you.   syslog.general.name (default: haraka)  The service name to show up in the logs.  syslog.general.facility (default: MAIL)  The syslog logging facility to use.  MAIL makes the most sense, but some\ndefault syslog configs may try to do something special with this log level.\nFreeBSD and OSX, for example, does not log all messages sent to this log\nlevel to the same file.\nValid options are:\nMAIL\nKERN\nUSER\nDAEMON\nAUTH\nSYSLOG\nLPR\nNEWS\nUUCP\nLOCAL0 ... LOCAL7  syslog.general.pid (default: 1)  Option to put the PID in the log message.  syslog.general.odelay (default: 1)  Option to open the connection on the first log message.  syslog.general.ndelay (default: 0)  Option to open the connection immediately.  syslog.general.cons (default: 0)  Option to write directly to system console if there is an error\nwhile sending to system logger.  syslog.general.nowait (default: 0)  Don't wait for child processes that may have been created while\nlogging the message.  syslog.general.always_ok (default: false)  If false, then this plugin will return with just next() allowing other\nplugins that have registered for the log hook to run.  To speed things up,\nif no other log hooks need to run (daemon), then one can make this true.\nThis will case the plugin to always call next(OK).",{"id":695,"path":696,"dir":218,"title":697,"description":698,"keywords":699,"body":701},"content:8.plugins:tarpit.md","/plugins/tarpit","tarpit - Tarpit plugin","Haraka tarpit plugin - Tarpit plugin",[119,229,700,124],"Plugin Timeout","  Tarpit plugin  This plugin is designed to introduce deliberate delays on the response\nof every hook in order to slow down a connection.  It has no\nconfiguration and is designed to be used only by other plugins.  It must be loaded early in config/plugins (e.g. before any plugins\nthat accept recipients or that return OK) but must be loaded   after \nany plugins that wish to use it.  Usage  To use this plugin in another plugin set:   connection.notes.tarpit = \u003Cseconds to delay>;\n  or   connection.transaction.notes.tarpit = \u003Cseconds to delay>;\n  Configuration  The configuration file for tarpit is config/tarpit.ini.   hooks_to_delay - a list of hooks to delay at. This setting can be used to\noverride the default list in the plugin. For example, if you notice that\nmalware is disconnecting after delaying rcpt_ok, you can remove just that\nhook from the list:  hooks_to_delay=connect,helo,ehlo,mail,rcpt,data,data_post,queue,unrecognized_command,vrfy,noop,rset,quit  Plugin Timeout  config/tarpit.timeout (Default: 0)  All Haraka plugins can configure a   name .timeout file. The timeout specifies\nhow long Haraka lets the plugin do nothing before it times out. When zero,\nthere is no timeout. When non-zero and   seconds to delay  is longer than\ntarpit.timeout (default: 1s), you'll get errors like this in your log files:   [core] Plugin tarpit timed out on hook rcpt - make sure it calls the callback\n[core] Plugin tarpit timed out on hook quit - make sure it calls the callback\n  The solution is to set the contents of config/tarpit.timeout to zero or\n  seconds to delay  + 1.  Logging  When tarpitting a command it will log 'tarpitting response for Ns' to\nthe INFO facility where N is the number of seconds.",{"id":703,"path":704,"dir":218,"title":705,"description":706,"keywords":707,"body":714},"content:8.plugins:tls.md","/plugins/tls","tls - TLS support for Haraka","Haraka tls plugin - TLS support for Haraka",[708,709,710,711,229,712,713],"Certificate Files","Certificate Directory","Purchased Certificate","Self Issued (unsigned) Certificate","Inbound Specific Configuration","[redis] section","  TLS plugin  This plugin enables the use of TLS (via   STARTTLS ) in Haraka.  For this plugin to work you must have SSL certificates installed correctly.  Certificate Files  Defaults are shown and can be overridden in   config/tls.ini .     key  =tls_key.pem\n   cert  =tls_cert.pem\n   dhparam  =dhparams.pem\n  Certificate Directory  If the directory   config/tls  exists, each file within the directory is expected to be a PEM encoded TLS bundle. Generate the PEM bundles in The Usual Way  TM  by concatenating the key, certificate, and CA/chain certs in that order. Example:     cat   example.com.key   example.com.crt   ca.crt   >   config/tls/example.com.pem\n  An example   acme.sh  deployment   script  demonstrates how to install   Let's Encrypt  certificates to the Haraka   config/tls directory.  Haraka has   SNI  support. When the remote MUA/MTA presents a servername during the TLS handshake and a TLS certificate with that Common Name matches, that certificate will be presented. If no match is found, the default certificate (see Certificate Files above) is presented.  Purchased Certificate  If you have a purchased certificate, append any intermediate/chained/ca-cert\nfiles to the certificate in this order:   The CA signed SSL cert  Any intermediate certificates  The CA root certificate  See also   Setting Up TLS  Self Issued (unsigned) Certificate  Create a certificate and key file in the config directory with the following\ncommand:     openssl   req   -x509   -nodes   -days   2190   -newkey   rsa:2048   -keyout   config/tls_key.pem   -out   config/tls_cert.pem\n  You will be prompted to provide details of your organization. Make sure the\nCommon Name is set to your servers Fully Qualified Domain Name, which should\nbe the same as the contents of your   config/me  file.  Configuration  The following settings can be specified in   config/tls.ini .  key  Specifies an alternative location for the key file. For multiple keys, use   key[]=  assignment for each. Non-absolute paths are relative to the   config/  directory.  To configure a single key and a cert chain, located in the   config/ \ndirectory, use the following in   tls.ini :     key  =example.com.key.pem\n   cert  =example.com.crt-chain.pem\n  To use multiple pairs of key and cert chain files outside of the haraka\n  config/  directory, configure instead:     key[]=/etc/ssl/private/example.com.rsa.key.pem\n   cert[]=/etc/ssl/private/example.com.rsa.crt-chain.pem\n   key[]=/etc/ssl/private/example.com.ecdsa.key.pem\n   cert[]=/etc/ssl/private/example.com.ecdsa.crt-chain.pem\n  cert  Specifies the location(s) for the certificate chain file. For multiple certificate chains, use   cert[]=  assignment for each. Non-absolute paths are relative to the   config/  directory. See the description of the   key  parameter for specific use.  no_tls_hosts  If needed, add this section to the   config/tls.ini  file and list any IP ranges that have broken TLS hosts. Ex:     [no_tls_hosts]\n   192.168.1.3\n   172.16.0.0/16\n  The   Node.js TLS  page has additional information about the following options.  no_starttls_ports  An array of incoming ports on which Haraka will not advertise STARTTLS capability.     no_starttls_ports[]=2525\n  force_tls_hosts  For known good TLS hosts, it's possible to force that the outbound mailer will only connect via secure sockets. This makes Haraka use   forced TLS  instead of   opportunistic TLS . For forced TLS, the STARTTLS upgrade must succeed with a valid certificate (overriding   rejectUnauthorized ). The list is matched both against the host (MX record or   nexthop  in   relay_dest_domains.ini ), and the domain name of the email address.  Note: unlike   no_tls_hosts , this feature is implemented as an array:     [outbound]\n   force_tls_hosts[]=172.17.123.1\n   force_tls_hosts[]=172.17.124.0/24\n   force_tls_hosts[]=mx.example.org\n   force_tls_hosts[]=example.com\n  ciphers  A list of allowable ciphers to use. Example:   ciphers=EECDH+AESGCM:EDH+aRSA+AESGCM:EECDH+AES256:EDH+aRSA+AES256:EECDH+AES128:EDH+aRSA+AES128:RSA+AES:RSA+3DES\n  See also:   Mozilla SSL configuration generator  and the   SSLlabs Test Page  minVersion  Specifies minimum allowable TLS protocol version to use. Example:    minVersion=TLSv1.1 \n  If unset, the default is node's tls.DEFAULT_MIN_VERSION constant.  (  Node.js 11.4+ required , for older instances you can use   secureProtocol  settings)  honorCipherOrder  If specified, the list of configured ciphers is treated as the cipher priority from highest to lowest. The first matching cipher will be used, instead of letting the client choose. The default is   true .  ecdhCurve  Specifies the elliptic curve used for ECDH or ECDHE ciphers.\nOnly one curve can be specified. The default is   prime256v1  (NIST P-256).  dhparam  Specifies the file containing the diffie-hellman parameters to use for DH or DHE key exchange. If this param or file is missing, it will be generated automatically. Default:   dhparams.pem .  requestCert  Whether Haraka should request a certificate from a connecting client.   requestCert=[true|false]  (default: true)\n  rejectUnauthorized  Reject connections from clients without a CA validated TLS certificate.   rejectUnauthorized=[true|false]  (default: false)\n  requireAuthorized  When   rejectUnauthorized=false , require validated TLS certificates on just the specified ports.     requireAuthorized[]=465  ;\n   requireAuthorized[]=587  ;\n  secureProtocol  Specifies the OpenSSL API function used for handling the TLS session. Choose\none of the methods described at the\n  OpenSSL API page .\nThe default is   SSLv23_method .  requestOCSP  Specifies that OCSP Stapling should be enabled, according to RFC 6066.\nStapling of OCSP messages allows the client to receive these along the\nTLS session setup instead of delaying the session setup by requiring a\nseparate http connection to the OCSP server.   requestOCSP=[true|false]  (default: false)\n  OCSP responses from the OCSP server are cached in memory for as long as\nthey are valid, and get refreshed after that time. A server restart\nrequires the OCSP responses to be fetched again upon the first client\nconnection.  Inbound Specific Configuration  By default the above options are shared with outbound mail (either\nusing   smtp_forward ,   smtp_proxy  or plain outbound mail heading to\nan external destination). To make these options specific to inbound\nmail, put them under an   [inbound]  parameter group. Outbound options\ncan go under an   [outbound]  parameter group, and plugins that use\nSMTP tls for queueing such as   smtp_proxy  and   smtp_forward  can\nuse that plugin name for plugin specific options.   [redis]  section  This section is mainly used to enable so called   TLS NO-GO  feature that essentially stops advertising/using TLS if there was a problem setting it up previously. We use   no_tls|ip.add.re.ss  key to store the flag in redis. There are a couple of settings that control the behavior:   disable_for_failed_hosts = true  to enable the feature   disable_expiry = 604800  to set for how long we disable TLS for failing host, in seconds   disable_inbound_expiry = 3600  same as above, but applies to inbound (aka STARTTLS capability) only  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":716,"path":717,"dir":218,"title":718,"description":719,"keywords":720,"body":721},"content:8.plugins:toobusy.md","/plugins/toobusy","toobusy - Reject connections when the server is too busy","Haraka toobusy plugin - Reject connections when the server is too busy",[229],"  TooBusy plugin  This plugin will stop Haraka accepting new connections when the event loop\nlatency is too high.  See   node-toobusy  for details.  To use this plugin you have to install the 'toobusy-js' module by running\n'npm install toobusy-js' in your Haraka configuration directory.  This plugin should be listed at the top of your config/plugins file so that\nit runs before any other plugin that hooks lookup_rdns.  Configuration  If you wish to override the default maxLag value of 70ms then add the desired\nvalue to config/toobusy.maxlag.  This can be set and changed at runtime and\nno restart is required.  Note that if you set the maxLag value to \u003C10 then this will cause the toobusy\nmodule to raise an exception which will cause Haraka to stop.",{"id":723,"path":724,"dir":218,"title":725,"description":726,"keywords":727,"body":729},"content:8.plugins:uribl.md","/plugins/uribl","uribl - URI Blacklists plugin for Haraka","Haraka uribl plugin - URI Blacklists",[229,728],"Other files","  uribl plugin  This plugin extracts URIs and feeds them to RHS based blacklists such as\n  DBL  and   SEM-FRESH  and body URI based DNS blacklists such as\n  SURBL  and   URIBL .  This plugin will discard any domain name that does not have a valid TLD\nor any IP address within RFC1918, 127/8 or 169.254/16 (APIPA) and will\nconvert any URI ending in in-addr.arpa into an IP address lookup.  Configuration  This plugin reads configuration from uribl.ini.  The main section defines global settings for all lists and the blacklists\nzones are specified as INI section headings with the configuration for\neach zone within that section.  The main section can contain the following options:   timeout  Default: 30  The total timeout in seconds for each group of lookups.  Any group of\nlookups that takes longer than this will be aborted and the session\nwill continue.  max_uris_per_list  Default: 20  This option limits the maximum number of unique lookups that will be\nsubmitted for each list after the input has been normalized into the\nquery format required for the list.  \nAny lookups greater than the limit will be discarded.  List sections should be named as the zone of the blacklist and can\ncontain the following options:  At least one of the following must be set for any queries to be run for\nthe blacklist.   rdns = 1 | true | yes | on | enabled  Check any rDNS names against the list.  helo = 1 | true | yes | on | enabled  Check the EHLO/HELO argument against the list.  envfrom = 1 | true | yes | on | enabled  Check the MAIL FROM domain against the list.  from = 1 | true | yes | on | enabled  Check the domain portion of the From: header against the list.  replyto = 1 | true | yes | on | enabled  Check the domain portion of the Reply-To: header against the list.  msgid = 1 | true | yes | on | enabled  Check the RHS of the Message-Id: header against the list.  body = 1 | true | yes | on | enabled  Check any URIs found within the body of the message against the list.  The following are optional for each list:   custom_msg  A custom rejection message that will be returned to the SMTP client\nif the list returns a positive result.  If found within the string\n{uri} will be replaced by the URI value looked up and {zone} will\nbe replaced by the blacklist zone name.  validate  A regular expression that will be tested against the first A record\nreturned by the list.  If it does not evaluate to true then the positive\nresult will be discarded.  Example: ^(?!127.0.1.255)127. would check\nthat the IP address returned start with 127. and is not 127.0.1.255  bitmask  This is optionally used for lists such as   SURBL  and   URIBL  that\nreturn bitmask values in the last octet of the returned IP address to\ncombine multiple lists into a single zone.  Using this you may specify\nwhich lists within the zone you want use.  no_ip_lookups = 1 | true | yes | on | enabled  Specifies that no IP addresses should ever be check against this list.\nThis is required for dbl.spamhaus.org.  strip_to_domain= 1 | true | yes | on | enabled  Specifies that the list requires hostnames be stripped down to the\ndomain boundaries prior to querying the list.  This is required for\nthe   SURBL  and   URIBL  lists.  Other files   uribl.excludes  This contains a list of domains that should never be looked up in\nany blacklist as they are known good and will never be listed.\nThis helps to keep useless queries to a minimum.",{"id":731,"path":732,"dir":218,"title":733,"description":734,"keywords":735,"body":739},"content:8.plugins:watch.md","/plugins/watch","watch - smtp connections in HTTP browser","Haraka watch plugin - smtp connections in HTTP browser",[736,737,738],"Enable Watch","Tips","Interpretation Key","  Watch plugin  Watch SMTP traffic to your Haraka server in a web interface.    Enable Watch   Enable Haraka's HTTP server (see   listen  in http.ini)  Add 'watch' to config/plugins  Point your web browser at   http://mail.example.com/watch/  Enjoy the blinky lights.  Tips   Hover your mouse pointer or tap (with touch devices) on table data to see more\ndetails.  Copy that connection UUID at left and use it to grep your logs for even more.  Edit the files in watch/html and play with the appearance. If you make it\nbetter, post a screen shot somewhere and create an Issue or PR.  Interpretation Key   Green: tests passed  Light Green: tests passed, but with conditions  Yellow: poor results, but not awful.  Light red: tests failed, but no rejection  Red: tests failed causing rejection",{"id":741,"path":742,"dir":218,"title":743,"description":744,"keywords":745,"body":747},"content:8.plugins:xclient.md","/plugins/xclient","xclient - XCLIENT support for Haraka","Haraka xclient plugin - XCLIENT support for Haraka",[746],"configuration","  XClient plugin  Implements the   XCLIENT  protocol.  configuration   xclient.hosts  A list of IP addresses, one per line that should be allowed to use the\nXCLIENT protocol.  Localhost (127.0.0.1 or ::1) is allowed implicitly.",{"id":749,"path":750,"dir":7,"title":751,"description":751,"keywords":752,"body":755},"content:barelf.md","/barelf","Bare Line Feeds sent to Haraka",[753,754],"Bare LFs in SMTP","Where did that pointer come from?","  Bare LFs in SMTP  Most likely you're here because your mailer displayed the pointer\n  See http://haraka.github.io/barelf/  Where did that pointer come from?  It was generated by   Haraka , an Internet message transfer agent. Your mailer tried to send an e-mail message to a server running Haraka.\nUnfortunately, Haraka spotted a problem: your mailer sent a bare LF.  Why should I worry about bare LFs?  You can't get mail through to msn.com and thousands of other systems around the Internet. Your mailer is violating 822bis section 2.3, which specifically prohibits all bare LFs.  How can my mailer be fixed?  That depends on what software you're using.   Solaris 2.5 sendmail: \nUpgrade!\nFixed in Solaris 2.5.1.\nYou can fix the problem by putting ``,E=\\r\\n''\nat the end of Mether, Mtcp, or Msmtp in sendmail.cf.\n(Note that Mether is not the same as DMether.)  sendmail V8 has a bug that will produce a bare LF in certain messages (e.g., messages with very long lines). This bug was identified in November 1996; I don't know if it has been fixed yet.   Eudora Pro 4.0 for Windows: \nUpgrade!\nThe HTML LF problem was fixed in 4.0.1.\nThe attachment LF problem was fixed in 4.1.   listproc 6.0c: \nChuck Foster says you should add   CONVERT(buf);'' before  WRITE_TO_SOCKET'' around line 165 of sysmail.c\nin the Listproc source code.   fetchmail: \nUpgrade!\nRecent versions of fetchmail reportedly do the right thing.\nMake sure the forcecr option is on.   Galacticom WorldGroups: \nReported 19970716. No information yet on how it can be fixed.   Claris Emailer: \nReported 19980613. No information yet on how it can be fixed.  What is a bare LF, anyway?  It is an ASCII linefeed (LF) character not preceded by an ASCII carriage-return (CR) character.\nEvery line in an Internet mail message is required to end with CR LF. The entire message ends with CR LF dot CR LF.  822bis specifically prohibits other uses of LF.\nThe mail clients discussed above are incorrectly ending lines with LF and, in most cases, ending the entire message with LF dot LF.\nThat's not CR LF dot CR LF, so a server such as msn.com will sit there waiting for the rest of the message. After a while it'll give up and drop the connection.\nYour mail doesn't get through.  Some mail servers convert a bare LF into CR LF, and accept LF dot LF as the end of a mail message. This behavior is specifically prohibited by 821bis (and RFC 2821).  This document was taken from   http://cr.yp.to/docs/smtplf.html",1736299928659]